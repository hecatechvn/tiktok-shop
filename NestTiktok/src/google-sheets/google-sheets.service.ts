// src/google-sheets/google-sheets.service.ts

import { Injectable, Logger } from '@nestjs/common';
import { google, sheets_v4, Auth, drive_v3 } from 'googleapis';
import { join } from 'path';
import * as fs from 'fs';
import {
  AppendToSheetParams,
  WriteToSheetParams,
  AddSheetParams,
} from '../types/google-sheets';

interface CachedSheetInfo {
  sheetId: number;
  title: string;
  lastUpdated: number;
}

interface SpreadsheetCache {
  sheets: Map<string, CachedSheetInfo>;
  lastUpdated: number;
}

@Injectable()
export class GoogleSheetsService {
  private readonly logger = new Logger(GoogleSheetsService.name);
  private readonly auth: Auth.GoogleAuth;

  // Cache ƒë·ªÉ l∆∞u tr·ªØ th√¥ng tin spreadsheet v√† tr√°nh g·ªçi API nhi·ªÅu l·∫ßn
  private readonly spreadsheetCache = new Map<string, SpreadsheetCache>();
  private readonly CACHE_TTL = 5 * 60 * 1000; // 5 ph√∫t cache TTL

  // Quota tracking
  private apiCallCount = 0;
  private taskStartTime = 0;
  private currentTaskName = '';

  // Batch operation queue ƒë·ªÉ gom nh√≥m c√°c operations
  private readonly batchQueue = new Map<
    string,
    Array<{
      range: string;
      values: any[][];
      resolve: (value: any) => void;
      reject: (error: any) => void;
    }>
  >();

  // Debounce timer cho batch operations
  private readonly batchTimers = new Map<string, NodeJS.Timeout>();
  private readonly BATCH_DELAY = 500; // 500ms delay ƒë·ªÉ gom nh√≥m operations

  constructor() {
    // T√¨m ƒë∆∞·ªùng d·∫´n ƒë·∫øn file service-account.json t·ª´ nhi·ªÅu v·ªã tr√≠ c√≥ th·ªÉ
    let keyFilePath: string | undefined;
    const possiblePaths = [
      join(process.cwd(), 'src/google-sheets/service-account.json'),
      join(process.cwd(), 'dist/google-sheets/service-account.json'),
      join(__dirname, 'service-account.json'),
    ];

    for (const filePath of possiblePaths) {
      if (fs.existsSync(filePath)) {
        keyFilePath = filePath;
        this.logger.log(`Using service account key file at: ${keyFilePath}`);
        break;
      }
    }

    if (!keyFilePath) {
      this.logger.error('Could not find service-account.json file!');
      throw new Error('Service account key file not found');
    }

    this.auth = new google.auth.GoogleAuth({
      keyFile: keyFilePath,
      scopes: [
        'https://www.googleapis.com/auth/spreadsheets',
        'https://www.googleapis.com/auth/drive',
      ],
    });
  }

  /**
   * B·∫Øt ƒë·∫ßu theo d√µi quota cho m·ªôt task
   */
  startTaskTracking(taskName: string): void {
    this.apiCallCount = 0;
    this.taskStartTime = Date.now();
    this.currentTaskName = taskName;
    this.logger.log(`üîç B·∫Øt ƒë·∫ßu theo d√µi quota cho task: ${taskName}`);
  }

  /**
   * K·∫øt th√∫c theo d√µi v√† log th√¥ng tin quota
   */
  endTaskTracking(): void {
    const duration = Date.now() - this.taskStartTime;

    // Hi·ªÉn th·ªã chi ti·∫øt c√°c lo·∫°i API call
    this.logger.log(
      `üìä Th·ªëng k√™ quota cho task "${this.currentTaskName}":
       - S·ªë l·∫ßn g·ªçi API th√†nh c√¥ng: ${this.apiCallCount}
       - Th·ªùi gian th·ª±c hi·ªán: ${(duration / 1000).toFixed(2)}s
       - Chi ti·∫øt c√°c ho·∫°t ƒë·ªông:
         + getSpreadsheetInfo: l·∫•y v√† cache th√¥ng tin spreadsheet (1 API call)
         + batchUpdate (addSheet): t·∫°o sheet m·ªõi n·∫øu c·∫ßn (1 API call)
         + batchUpdate (updateCells): ghi v√† ƒë·ªãnh d·∫°ng d·ªØ li·ªáu c√πng l√∫c (1 API call duy nh·∫•t)
         + writeAndFormatSheet: ghi v√† ƒë·ªãnh d·∫°ng sheet (2 API calls)
         + writeMultipleSheets m·ªõi: t·ªëi ∆∞u t·ªëi ƒëa (ch·ªâ 2 API calls thay v√¨ 10+)`,
    );

    this.currentTaskName = '';
  }

  /**
   * Utility method ƒë·ªÉ x·ª≠ l√Ω retry v·ªõi exponential backoff cho Google API calls
   */
  private async executeWithRetry<T>(
    operation: () => Promise<T>,
    maxRetries = 5,
  ): Promise<T> {
    let retries = 0;
    // Kh√¥ng tƒÉng s·ªë l·∫ßn g·ªçi API ·ªü ƒë√¢y, ch·ªâ ƒë·∫øm khi th√†nh c√¥ng

    // Log chi ti·∫øt v·ªÅ l·∫ßn g·ªçi API
    const stackTrace = new Error().stack;
    const callerInfo = stackTrace ? stackTrace.split('\n')[2] : 'unknown';
    const callerFunction = callerInfo.match(/at\s+(\S+)/)?.[1] || 'unknown';

    while (true) {
      try {
        const result = await operation();
        // Ch·ªâ tƒÉng s·ªë l·∫ßn g·ªçi API khi th√†nh c√¥ng
        this.apiCallCount++;
        this.logger.debug(
          `üì° API Call #${this.apiCallCount} th√†nh c√¥ng t·ª´: ${callerFunction}`,
        );
        return result;
      } catch (error: unknown) {
        retries++;

        if (retries > maxRetries) {
          this.logger.error(
            `‚ùå ƒê√£ v∆∞·ª£t qu√° s·ªë l·∫ßn retry (${maxRetries}), n√©m l·ªói:`,
            error,
          );
          throw error;
        }

        // Ki·ªÉm tra n·∫øu l√† l·ªói 503 Service Unavailable ho·∫∑c 429 Rate Limit Exceeded
        let shouldRetry = false;
        let isRateLimit = false;

        // Type guard ƒë·ªÉ ki·ªÉm tra c√°c thu·ªôc t√≠nh c·ªßa error
        if (error && typeof error === 'object') {
          // S·ª≠ d·ª•ng type assertion an to√†n h∆°n
          const err = error as {
            response?: { status?: number };
            status?: number;
            code?: number | string;
            message?: string;
          };

          // Ki·ªÉm tra l·ªói 500 (Internal Server Error) ho·∫∑c 503 (Service Unavailable)
          const isServerError =
            err.response?.status === 500 ||
            err.status === 500 ||
            err.code === 500;
          const isServiceUnavailable =
            err.response?.status === 503 ||
            err.status === 503 ||
            err.code === 503;

          // Ki·ªÉm tra l·ªói 429 (Rate Limit Exceeded)
          isRateLimit =
            err.response?.status === 429 ||
            err.status === 429 ||
            err.code === 429 ||
            (typeof err.message === 'string' &&
              err.message.includes('Quota exceeded')) ||
            (typeof err.message === 'string' &&
              err.message.includes('Rate limit exceeded')) ||
            (typeof err.message === 'string' &&
              err.message.includes('rateLimitExceeded'));

          shouldRetry = isServerError || isServiceUnavailable || isRateLimit;
        }

        if (!shouldRetry) {
          throw error; // N·∫øu kh√¥ng ph·∫£i l·ªói c·∫ßn retry, n√©m l·ªói ngay
        }

        // T√≠nh th·ªùi gian ch·ªù v·ªõi exponential backoff theo h∆∞·ªõng d·∫´n c·ªßa Google
        // C√¥ng th·ª©c: min(((2^n) + random_number_milliseconds), maximum_backoff)
        const baseDelay = Math.pow(2, retries) * 2000; // TƒÉng t·ª´ 1000 l√™n 2000ms
        const randomJitter = Math.random() * 2000; // TƒÉng t·ª´ 1000 l√™n 2000ms
        const maxBackoff = isRateLimit ? 120000 : 90000; // TƒÉng t·ª´ 64000/60000 l√™n 120000/90000ms
        const waitTime = Math.min(baseDelay + randomJitter, maxBackoff);

        if (isRateLimit) {
          this.logger.warn(
            `üö´ Google Sheets quota exceeded. Retry ${retries}/${maxRetries} sau ${Math.round(
              waitTime / 1000,
            )}s...`,
          );
        } else {
          this.logger.warn(
            `‚ö†Ô∏è Google Sheets service unavailable. Retry ${retries}/${maxRetries} sau ${Math.round(
              waitTime / 1000,
            )}s...`,
          );
        }

        await new Promise((resolve) => setTimeout(resolve, waitTime));
      }
    }
  }

  /**
   * T·∫°o v√† tr·∫£ v·ªÅ m·ªôt client API Google Sheets v·ªõi cache
   */
  private async getSheetsClient(): Promise<sheets_v4.Sheets> {
    const client = await this.auth.getClient();
    // @ts-expect-error - Google API typing issues with auth client
    return google.sheets({ version: 'v4', auth: client });
  }

  /**
   * T·∫°o v√† tr·∫£ v·ªÅ m·ªôt client API Google Drive v·ªõi cache
   */
  private async getDriveClient(): Promise<drive_v3.Drive> {
    const client = await this.auth.getClient();
    // @ts-expect-error - Google API typing issues with auth client
    return google.drive({ version: 'v3', auth: client });
  }

  /**
   * L·∫•y th√¥ng tin spreadsheet t·ª´ cache ho·∫∑c API
   */
  async getSpreadsheetInfo(spreadsheetId: string): Promise<SpreadsheetCache> {
    const now = Date.now();
    const cached = this.spreadsheetCache.get(spreadsheetId);

    // Ki·ªÉm tra cache c√≤n h·ª£p l·ªá kh√¥ng
    if (cached && now - cached.lastUpdated < this.CACHE_TTL) {
      return cached;
    }

    // N·∫øu cache h·∫øt h·∫°n ho·∫∑c kh√¥ng t·ªìn t·∫°i, g·ªçi API
    try {
      return this.executeWithRetry(async () => {
        const sheets = await this.getSheetsClient();
        const res = await sheets.spreadsheets.get({
          spreadsheetId,
          fields: 'sheets.properties(sheetId,title)',
        });

        const sheetsMap = new Map<string, CachedSheetInfo>();
        res.data.sheets?.forEach((sheet) => {
          if (
            sheet.properties?.title &&
            sheet.properties?.sheetId !== undefined
          ) {
            sheetsMap.set(sheet.properties.title, {
              sheetId: sheet.properties.sheetId!,
              title: sheet.properties.title,
              lastUpdated: now,
            });
          }
        });

        const cacheData: SpreadsheetCache = {
          sheets: sheetsMap,
          lastUpdated: now,
        };

        this.spreadsheetCache.set(spreadsheetId, cacheData);
        this.logger.debug(`Cached spreadsheet info for ${spreadsheetId}`);
        return cacheData;
      });
    } catch (error) {
      this.logger.error(
        `L·ªói khi l·∫•y th√¥ng tin spreadsheet ${spreadsheetId}:`,
        error,
      );

      // N·∫øu c√≥ l·ªói v√† c√≥ cache c≈©, tr·∫£ v·ªÅ cache c≈© n·∫øu n√≥ ch∆∞a qu√° c≈© (d∆∞·ªõi 1 gi·ªù)
      if (cached && now - cached.lastUpdated < 3600000) {
        this.logger.warn(`S·ª≠ d·ª•ng cache c≈© cho spreadsheet ${spreadsheetId}`);
        return cached;
      }

      // N·∫øu kh√¥ng c√≥ cache ho·∫∑c cache qu√° c≈©, t·∫°o cache r·ªóng t·∫°m th·ªùi
      const emptyCache: SpreadsheetCache = {
        sheets: new Map(),
        lastUpdated: now,
      };
      this.logger.warn(
        `T·∫°o cache r·ªóng t·∫°m th·ªùi cho spreadsheet ${spreadsheetId}`,
      );
      return emptyCache;
    }
  }

  /**
   * L·∫•y sheetId t·ª´ t√™n sheet v·ªõi cache
   */
  private async getSheetId(
    spreadsheetId: string,
    sheetName: string,
  ): Promise<number | null> {
    const spreadsheetInfo = await this.getSpreadsheetInfo(spreadsheetId);
    const sheetInfo = spreadsheetInfo.sheets.get(sheetName);
    return sheetInfo?.sheetId ?? null;
  }

  /**
   * Ki·ªÉm tra xem m·ªôt sheet c√≥ t·ªìn t·∫°i kh√¥ng v·ªõi cache
   */
  async sheetExists(
    spreadsheetId: string,
    sheetTitle: string,
  ): Promise<boolean> {
    const spreadsheetInfo = await this.getSpreadsheetInfo(spreadsheetId);
    return spreadsheetInfo.sheets.has(sheetTitle);
  }

  /**
   * Th√™m operation v√†o batch queue ƒë·ªÉ x·ª≠ l√Ω gom nh√≥m
   */
  private addToBatchQueue(
    spreadsheetId: string,
    range: string,
    values: any[][],
  ): Promise<sheets_v4.Schema$UpdateValuesResponse> {
    return new Promise((resolve, reject) => {
      if (!this.batchQueue.has(spreadsheetId)) {
        this.batchQueue.set(spreadsheetId, []);
      }

      const queue = this.batchQueue.get(spreadsheetId)!;
      queue.push({ range, values, resolve, reject });

      // Clear existing timer
      const existingTimer = this.batchTimers.get(spreadsheetId);
      if (existingTimer) {
        clearTimeout(existingTimer);
      }

      // Set new timer ƒë·ªÉ process batch sau BATCH_DELAY
      const timer = setTimeout(() => {
        this.processBatchQueue(spreadsheetId);
      }, this.BATCH_DELAY);

      this.batchTimers.set(spreadsheetId, timer);
    });
  }

  /**
   * X·ª≠ l√Ω batch queue ƒë·ªÉ gom nh√≥m c√°c operations
   */
  private async processBatchQueue(spreadsheetId: string): Promise<void> {
    const queue = this.batchQueue.get(spreadsheetId);
    if (!queue || queue.length === 0) {
      return;
    }

    // Clear queue v√† timer
    this.batchQueue.set(spreadsheetId, []);
    this.batchTimers.delete(spreadsheetId);

    try {
      // Gom nh√≥m t·∫•t c·∫£ operations th√†nh m·ªôt batch update
      const data = queue.map((item) => ({
        range: item.range,
        values: item.values,
      }));

      const result = await this.batchUpdateToSheet({ spreadsheetId, data });

      // Resolve t·∫•t c·∫£ promises
      queue.forEach((item) => item.resolve(result));

      this.logger.debug(
        `Processed batch of ${queue.length} operations for ${spreadsheetId}`,
      );
    } catch (error) {
      // Reject t·∫•t c·∫£ promises
      queue.forEach((item) => item.reject(error));
      this.logger.error(`Batch processing failed for ${spreadsheetId}:`, error);
    }
  }

  /**
   * C·∫≠p nh·∫≠t gi√° tr·ªã trong m·ªôt ph·∫°m vi c·ª• th·ªÉ c·ªßa b·∫£ng t√≠nh v·ªõi batch optimization
   */
  async writeToSheet({
    spreadsheetId,
    range,
    values,
    taskName,
  }: WriteToSheetParams): Promise<sheets_v4.Schema$UpdateValuesResponse> {
    // B·∫Øt ƒë·∫ßu tracking n·∫øu c√≥ taskName
    if (taskName && !this.currentTaskName) {
      this.startTaskTracking(taskName);
    }

    // Log chi ti·∫øt v·ªÅ ho·∫°t ƒë·ªông
    this.logger.debug(
      `üìù writeToSheet: ${range} (${values.length} d√≤ng x ${values[0]?.length || 0} c·ªôt)`,
    );

    // S·ª≠ d·ª•ng batch queue ƒë·ªÉ t·ªëi ∆∞u h√≥a
    const result = await this.addToBatchQueue(spreadsheetId, range, values);

    // K·∫øt th√∫c tracking n·∫øu ƒë√£ b·∫Øt ƒë·∫ßu v·ªõi taskName n√†y
    if (taskName && this.currentTaskName === taskName) {
      this.endTaskTracking();
    }

    return result;
  }

  /**
   * Batch update tr·ª±c ti·∫øp (kh√¥ng qua queue)
   */
  async batchUpdateToSheet({
    spreadsheetId,
    data,
  }: {
    spreadsheetId: string;
    data: { range: string; values: any[][] }[];
  }): Promise<sheets_v4.Schema$BatchUpdateValuesResponse> {
    // Log s·ªë l∆∞·ª£ng operations ƒë∆∞·ª£c gom nh√≥m
    if (this.currentTaskName) {
      this.logger.debug(
        `Batch update with ${data.length} operations in task "${this.currentTaskName}"`,
      );
    }

    return this.executeWithRetry(async () => {
      const sheets = await this.getSheetsClient();
      const result = await sheets.spreadsheets.values.batchUpdate({
        spreadsheetId,
        requestBody: {
          valueInputOption: 'USER_ENTERED',
          data,
        },
      });
      return result.data;
    });
  }

  /**
   * Th√™m gi√° tr·ªã v√†o cu·ªëi m·ªôt ph·∫°m vi c·ª• th·ªÉ c·ªßa b·∫£ng t√≠nh
   */
  async appendToSheet({
    spreadsheetId,
    range,
    values,
    taskName,
  }: AppendToSheetParams): Promise<any> {
    // B·∫Øt ƒë·∫ßu tracking n·∫øu c√≥ taskName
    if (taskName && !this.currentTaskName) {
      this.startTaskTracking(taskName);
    }

    const result = await this.executeWithRetry(async () => {
      const sheets = await this.getSheetsClient();
      const res = await sheets.spreadsheets.values.append({
        spreadsheetId,
        range,
        valueInputOption: 'USER_ENTERED',
        insertDataOption: 'INSERT_ROWS',
        requestBody: { values },
      });
      return res.data;
    });

    // K·∫øt th√∫c tracking n·∫øu ƒë√£ b·∫Øt ƒë·∫ßu v·ªõi taskName n√†y
    if (taskName && this.currentTaskName === taskName) {
      this.endTaskTracking();
    }

    return result;
  }

  /**
   * Th√™m m·ªôt sheet m·ªõi v√†o b·∫£ng t√≠nh hi·ªán c√≥ v·ªõi cache invalidation
   */
  async addSheet({ spreadsheetId, sheetTitle }: AddSheetParams): Promise<any> {
    const exists = await this.sheetExists(spreadsheetId, sheetTitle);
    if (exists) {
      this.logger.log(`Sheet "${sheetTitle}" already exists.`);
      return { exists: true };
    }

    const result = await this.executeWithRetry(async () => {
      const sheets = await this.getSheetsClient();

      const request: sheets_v4.Params$Resource$Spreadsheets$Batchupdate = {
        spreadsheetId,
        requestBody: {
          requests: [
            {
              addSheet: {
                properties: {
                  title: sheetTitle,
                  gridProperties: {
                    rowCount: 1000,
                    columnCount: 26,
                  },
                },
              },
            },
          ],
        },
      };

      const res = await sheets.spreadsheets.batchUpdate(request);
      this.logger.log(`Added sheet "${sheetTitle}"`);
      return res.data;
    });

    // Invalidate cache sau khi th√™m sheet m·ªõi
    this.clearCache(spreadsheetId);

    return result;
  }

  /**
   * Chia s·∫ª b·∫£ng t√≠nh v·ªõi m·ªôt ng∆∞·ªùi d√πng c·ª• th·ªÉ
   */
  async shareSheet(
    spreadsheetId: string,
    email: string,
    role: 'writer' | 'reader' = 'reader',
  ): Promise<void> {
    try {
      const drive = await this.getDriveClient();
      await drive.permissions.create({
        fileId: spreadsheetId,
        requestBody: {
          type: 'user',
          role: role,
          emailAddress: email,
        },
        fields: 'id',
      });
      this.logger.log(`Sheet ${spreadsheetId} shared with ${email} as ${role}`);
    } catch (error) {
      this.logger.error(
        `Error sharing sheet ${spreadsheetId} with ${email}:`,
        error,
      );
      throw error;
    }
  }

  /**
   * Thu h·ªìi quy·ªÅn truy c·∫≠p c·ªßa m·ªôt ng∆∞·ªùi d√πng ƒë·ªëi v·ªõi b·∫£ng t√≠nh
   */
  async revokeAccess(spreadsheetId: string, email: string): Promise<void> {
    try {
      const drive = await this.getDriveClient();

      // T√¨m permission ID d·ª±a tr√™n email
      const response = await drive.permissions.list({
        fileId: spreadsheetId,
        fields: 'permissions(id,emailAddress)',
      });

      const permissions = response.data.permissions || [];
      const permission = permissions.find((p) => p.emailAddress === email);

      if (permission && permission.id) {
        // X√≥a quy·ªÅn truy c·∫≠p
        await drive.permissions.delete({
          fileId: spreadsheetId,
          permissionId: permission.id,
        });
        this.logger.log(
          `Access revoked for ${email} on sheet ${spreadsheetId}`,
        );
      } else {
        this.logger.warn(
          `No permission found for ${email} on sheet ${spreadsheetId}`,
        );
      }
    } catch (error) {
      this.logger.error(
        `Error revoking access for ${email} on sheet ${spreadsheetId}:`,
        error instanceof Error ? error.message : String(error),
      );
      throw error;
    }
  }

  /**
   * T·∫°o m·ªôt b·∫£ng t√≠nh m·ªõi v·ªõi ti√™u ƒë·ªÅ ƒë√£ cho
   */
  async createSheet(
    title: string,
    shareWithEmail?: string,
  ): Promise<string | null | undefined> {
    const sheets = await this.getSheetsClient();
    const res = await sheets.spreadsheets.create({
      requestBody: {
        properties: {
          title,
        },
      },
    });

    const spreadsheetId = res.data.spreadsheetId;

    // N·∫øu c√≥ email ƒë∆∞·ª£c cung c·∫•p, chia s·∫ª sheet v·ªõi ng∆∞·ªùi d√πng ƒë√≥
    if (shareWithEmail && typeof shareWithEmail === 'string' && spreadsheetId) {
      await this.shareSheet(spreadsheetId, shareWithEmail);
    }

    return spreadsheetId;
  }

  /**
   * ƒê·∫£m b·∫£o sheet t·ªìn t·∫°i v√† ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng v·ªõi header,
   * s·ª≠ d·ª•ng m·ªôt API call duy nh·∫•t khi c·∫ßn t·∫°o m·ªõi
   * @param spreadsheetId ID c·ªßa spreadsheet
   * @param sheetName T√™n sheet c·∫ßn ki·ªÉm tra/t·∫°o
   * @param header Header c·ªßa sheet
   * @returns true n·∫øu sheet m·ªõi ƒë∆∞·ª£c t·∫°o, false n·∫øu sheet ƒë√£ t·ªìn t·∫°i
   */
  async ensureSheetExistsWithHeader(
    spreadsheetId: string,
    sheetName: string,
    header: string[],
  ): Promise<boolean> {
    try {
      // Ki·ªÉm tra xem sheet th√°ng ƒë√£ t·ªìn t·∫°i ch∆∞a
      const exists = await this.sheetExists(spreadsheetId, sheetName);

      // N·∫øu sheet ƒë√£ t·ªìn t·∫°i, kh√¥ng c·∫ßn l√†m g√¨ th√™m
      if (exists) {
        return false; // Sheet ƒë√£ t·ªìn t·∫°i tr∆∞·ªõc ƒë√≥
      }

      this.logger.log(`Sheet "${sheetName}" kh√¥ng t·ªìn t·∫°i, ƒëang t·∫°o m·ªõi...`);

      // T·∫°o sheet m·ªõi v√† thi·∫øt l·∫≠p trong 3 b∆∞·ªõc t·ªëi thi·ªÉu
      // Step 1: T·∫°o sheet v·ªõi batch request
      const sheetId = await this.executeWithRetry(async () => {
        const sheets = await this.getSheetsClient();

        // T·∫°o sheet v·ªõi batch request ƒë·ªÉ ch·ªâ g·ªçi API m·ªôt l·∫ßn
        const res = await sheets.spreadsheets.batchUpdate({
          spreadsheetId,
          requestBody: {
            requests: [
              // T·∫°o sheet m·ªõi
              {
                addSheet: {
                  properties: {
                    title: sheetName,
                    gridProperties: {
                      rowCount: 50000,
                      columnCount: header.length + 2, // Th√™m v√†i c·ªôt d·ª± ph√≤ng
                      frozenRowCount: 1, // C·ªë ƒë·ªãnh h√†ng header lu√¥n
                      frozenColumnCount: 1, // C·ªë ƒë·ªãnh c·ªôt ƒë·∫ßu
                    },
                  },
                },
              },
            ],
          },
        });

        // L·∫•y sheetId t·ª´ k·∫øt qu·∫£ tr·∫£ v·ªÅ
        const addedSheet = res.data.replies?.[0]?.addSheet?.properties;
        const newSheetId = addedSheet?.sheetId;

        if (!newSheetId) {
          throw new Error(
            `Kh√¥ng th·ªÉ l·∫•y sheetId sau khi t·∫°o sheet ${sheetName}`,
          );
        }

        return newSheetId;
      });

      // Step 2: Ghi header v√† ƒë·ªãnh d·∫°ng trong m·ªôt l·∫ßn g·ªçi API duy nh·∫•t
      await this.executeWithRetry(async () => {
        const sheets = await this.getSheetsClient();

        // Ghi header tr∆∞·ªõc
        await sheets.spreadsheets.values.update({
          spreadsheetId,
          range: `${sheetName}!A1:${String.fromCharCode(65 + header.length - 1)}1`,
          valueInputOption: 'USER_ENTERED',
          requestBody: { values: [header] },
        });

        // ƒê·ªãnh d·∫°ng header v√† c·ªôt ng√†y th√°ng trong c√πng m·ªôt l·∫ßn g·ªçi
        return sheets.spreadsheets.batchUpdate({
          spreadsheetId,
          requestBody: {
            requests: [
              // ƒê·ªãnh d·∫°ng header
              {
                repeatCell: {
                  range: {
                    sheetId,
                    startRowIndex: 0,
                    endRowIndex: 1,
                    startColumnIndex: 0,
                    endColumnIndex: header.length,
                  },
                  cell: {
                    userEnteredFormat: {
                      backgroundColor: {
                        red: 0.9,
                        green: 0.9,
                        blue: 0.9,
                      },
                      textFormat: {
                        bold: true,
                        fontSize: 12,
                      },
                      horizontalAlignment: 'CENTER',
                      verticalAlignment: 'MIDDLE',
                      wrapStrategy: 'OVERFLOW_CELL',
                      padding: {
                        left: 20, // TƒÉng padding b√™n tr√°i
                        right: 20, // TƒÉng padding b√™n ph·∫£i
                        top: 4, // TƒÉng padding tr√™n
                        bottom: 4, // TƒÉng padding d∆∞·ªõi
                      },
                    },
                  },
                  fields: 'userEnteredFormat',
                },
              },
              // ƒê·ªãnh d·∫°ng c·ªôt Created Time l√† TEXT ƒë·ªÉ tr√°nh t·ª± ƒë·ªông chuy·ªÉn ƒë·ªïi sang s·ªë
              {
                repeatCell: {
                  range: {
                    sheetId,
                    startRowIndex: 0,
                    endRowIndex: 1000,
                    startColumnIndex: 22, // C·ªôt W - Created Time (23 l√† index 22)
                    endColumnIndex: 23,
                  },
                  cell: {
                    userEnteredFormat: {
                      numberFormat: {
                        type: 'TEXT',
                      },
                    },
                  },
                  fields: 'userEnteredFormat.numberFormat',
                },
              },
              // Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc t·ªëi thi·ªÉu cho c√°c c·ªôt
              {
                updateDimensionProperties: {
                  range: {
                    sheetId,
                    dimension: 'COLUMNS',
                    startIndex: 0,
                    endIndex: header.length,
                  },
                  properties: {
                    pixelSize: 150, // Thi·∫øt l·∫≠p chi·ªÅu r·ªông t·ªëi thi·ªÉu l√† 150 pixels
                  },
                  fields: 'pixelSize',
                },
              },
              // Auto resize columns (s·∫Ω m·ªü r·ªông c·ªôt n·∫øu n·ªôi dung l·ªõn h∆°n 150px)
              {
                autoResizeDimensions: {
                  dimensions: {
                    sheetId,
                    dimension: 'COLUMNS',
                    startIndex: 0,
                    endIndex: header.length,
                  },
                },
              },
            ],
          },
        });
      });

      // X√≥a cache ƒë·ªÉ ƒë·∫£m b·∫£o th√¥ng tin m·ªõi nh·∫•t
      this.clearCache(spreadsheetId);
      this.logger.log(`ƒê√£ t·∫°o v√† chu·∫©n b·ªã sheet ${sheetName} th√†nh c√¥ng`);

      return true; // Sheet m·ªõi ƒë∆∞·ª£c t·∫°o
    } catch (error) {
      this.logger.error(`L·ªói khi chu·∫©n b·ªã sheet ${sheetName}:`, error);
      throw error;
    }
  }

  /**
   * Flush t·∫•t c·∫£ pending batch operations ngay l·∫≠p t·ª©c
   */
  async flushBatchOperations(): Promise<void> {
    const spreadsheetIds = Array.from(this.batchQueue.keys());

    for (const spreadsheetId of spreadsheetIds) {
      const timer = this.batchTimers.get(spreadsheetId);
      if (timer) {
        clearTimeout(timer);
        this.batchTimers.delete(spreadsheetId);
      }
      await this.processBatchQueue(spreadsheetId);
    }

    this.logger.debug('Flushed all pending batch operations');
  }

  /**
   * Clear cache cho m·ªôt spreadsheet c·ª• th·ªÉ ho·∫∑c t·∫•t c·∫£
   */
  clearCache(spreadsheetId?: string): void {
    if (spreadsheetId) {
      this.spreadsheetCache.delete(spreadsheetId);
      this.logger.debug(`Cleared cache for spreadsheet ${spreadsheetId}`);
    } else {
      this.spreadsheetCache.clear();
      this.logger.debug('Cleared all spreadsheet cache');
    }
  }

  /**
   * X√≥a m·ªôt sheet kh·ªèi spreadsheet d·ª±a tr√™n sheetId
   * @param spreadsheetId ID c·ªßa spreadsheet
   * @param sheetId ID c·ªßa sheet c·∫ßn x√≥a
   * @returns K·∫øt qu·∫£ c·ªßa vi·ªác x√≥a sheet
   */
  async deleteSheet(spreadsheetId: string, sheetId: number): Promise<any> {
    try {
      const result = await this.executeWithRetry(async () => {
        const sheets = await this.getSheetsClient();

        const request: sheets_v4.Params$Resource$Spreadsheets$Batchupdate = {
          spreadsheetId,
          requestBody: {
            requests: [
              {
                deleteSheet: {
                  sheetId,
                },
              },
            ],
          },
        };

        const res = await sheets.spreadsheets.batchUpdate(request);
        this.logger.log(`Deleted sheet with ID: ${sheetId}`);
        return res.data;
      });

      // X√≥a cache sau khi x√≥a sheet
      this.clearCache(spreadsheetId);

      return result;
    } catch (error) {
      this.logger.error(`Error deleting sheet ${sheetId}:`, error);
      throw error;
    }
  }

  /**
   * Ph∆∞∆°ng th·ª©c t·ªëi ∆∞u ƒë·ªÉ ghi d·ªØ li·ªáu v√†o nhi·ªÅu sheet c√πng l√∫c
   * Gi·∫£m thi·ªÉu overhead khi x·ª≠ l√Ω nhi·ªÅu sheet - CH·ªà S·ª¨ D·ª§NG 1 API CALL TH·ªêNG NH·∫§T
   */
  async writeMultipleSheets({
    spreadsheetId,
    sheets,
    taskName,
  }: {
    spreadsheetId: string;
    sheets: Array<{
      sheetName: string;
      header: string[];
      data: any[][];
      numericColumns?: string[];
    }>;
    taskName?: string;
  }): Promise<void> {
    // B·∫Øt ƒë·∫ßu tracking n·∫øu c√≥ taskName
    if (taskName && !this.currentTaskName) {
      this.startTaskTracking(taskName);
    }

    try {
      this.logger.debug(
        `üöÄ writeMultipleSheets: Ghi d·ªØ li·ªáu v√†o ${sheets.length} sheets c√πng l√∫c (si√™u t·ªëi ∆∞u - 1 API call)`,
      );

      // T·∫°o m·ªôt map ƒë·ªÉ l∆∞u th√¥ng tin sheetId cho m·ªói sheet ƒë·ªÉ tr√°nh g·ªçi API l·∫•y info nhi·ªÅu l·∫ßn
      const sheetIdMap = new Map<string, number>();

      // L·∫•y to√†n b·ªô th√¥ng tin spreadsheet ch·ªâ m·ªôt l·∫ßn duy nh·∫•t
      this.logger.debug(`Ki·ªÉm tra sheets t·ªìn t·∫°i...`);
      const spreadsheetInfo = await this.getSpreadsheetInfo(spreadsheetId);

      // Chu·∫©n b·ªã t·∫•t c·∫£ c√°c y√™u c·∫ßu ƒë·ªÉ g·ª≠i trong m·ªôt API call duy nh·∫•t
      const batchRequests: any[] = [];
      const existingSheets = new Set<string>();

      // Ki·ªÉm tra sheet n√†o ƒë√£ t·ªìn t·∫°i, sheet n√†o c·∫ßn t·∫°o m·ªõi
      for (const sheet of sheets) {
        const sheetExists = spreadsheetInfo.sheets.has(sheet.sheetName);
        if (sheetExists) {
          // L∆∞u sheetId v√†o map n·∫øu ƒë√£ t·ªìn t·∫°i
          const sheetId = spreadsheetInfo.sheets.get(sheet.sheetName)?.sheetId;
          if (sheetId !== undefined) {
            sheetIdMap.set(sheet.sheetName, sheetId);
            existingSheets.add(sheet.sheetName);
          }
        } else {
          // Th√™m y√™u c·∫ßu t·∫°o sheet m·ªõi
          batchRequests.push({
            addSheet: {
              properties: {
                title: sheet.sheetName,
                gridProperties: {
                  rowCount: 1000,
                  columnCount: sheet.header.length + 2, // Th√™m v√†i c·ªôt d·ª± ph√≤ng
                  frozenRowCount: 1, // C·ªë ƒë·ªãnh h√†ng header lu√¥n
                  frozenColumnCount: 1, // C·ªë ƒë·ªãnh c·ªôt ƒë·∫ßu
                },
              },
            },
          });
        }
      }

      // Th·ª±c hi·ªán API call ƒë·∫ßu ti√™n ƒë·ªÉ t·∫°o c√°c sheet m·ªõi n·∫øu c·∫ßn
      if (batchRequests.length > 0) {
        this.logger.debug(`T·∫°o ${batchRequests.length} sheets m·ªõi...`);
        const newSheetsResult = await this.executeWithRetry(async () => {
          const sheetsClient = await this.getSheetsClient();
          return sheetsClient.spreadsheets.batchUpdate({
            spreadsheetId,
            requestBody: { requests: batchRequests },
          });
        });

        // C·∫≠p nh·∫≠t sheetIdMap v·ªõi c√°c sheet m·ªõi ƒë∆∞·ª£c t·∫°o
        if (newSheetsResult.data.replies) {
          for (let i = 0; i < newSheetsResult.data.replies.length; i++) {
            const reply = newSheetsResult.data.replies[i];
            if (reply.addSheet?.properties) {
              const newSheetId = reply.addSheet.properties.sheetId;
              const newSheetTitle = reply.addSheet.properties.title;
              if (newSheetId !== undefined && newSheetTitle) {
                // ƒê·∫£m b·∫£o newSheetId l√† number
                const safeSheetId: number =
                  typeof newSheetId === 'number' ? newSheetId : 0;
                sheetIdMap.set(newSheetTitle, safeSheetId);

                // C·∫≠p nh·∫≠t cache v·ªõi sheet m·ªõi
                const sheetInfo: CachedSheetInfo = {
                  sheetId: safeSheetId,
                  title: newSheetTitle,
                  lastUpdated: Date.now(),
                };
                spreadsheetInfo.sheets.set(newSheetTitle, sheetInfo);
              }
            }
          }
        }

        // X√≥a m·∫£ng batch request ƒë·ªÉ chu·∫©n b·ªã cho c√°c y√™u c·∫ßu m·ªõi
        batchRequests.length = 0;
      }

      // ƒê·∫£m b·∫£o spreadsheet c√≥ ƒë·ªß d√≤ng cho d·ªØ li·ªáu - PH·∫¢I ƒê·∫∂T TR∆Ø·ªöC KHI TH√äM UPDATECELLS
      const maxDataRows = Math.max(
        ...sheets.map((sheet) => sheet.data.length),
        0,
      );
      if (maxDataRows > 0) {
        // Th√™m y√™u c·∫ßu m·ªü r·ªông s·ªë d√≤ng n·∫øu c·∫ßn - ƒê·∫∂T ƒê·∫¶U TI√äN trong m·∫£ng requests
        for (const sheet of sheets) {
          const sheetId = sheetIdMap.get(sheet.sheetName);
          if (sheetId === undefined) continue;

          // ƒê·∫∑t y√™u c·∫ßu c·∫≠p nh·∫≠t s·ªë d√≤ng V√ÄO ƒê·∫¶U m·∫£ng batchRequests
          batchRequests.unshift({
            updateSheetProperties: {
              properties: {
                sheetId: sheetId,
                gridProperties: {
                  rowCount: Math.max(5000, maxDataRows + 100), // ƒê·ªß d√≤ng nh∆∞ng kh√¥ng qu√° l·ªõn
                },
              },
              fields: 'gridProperties.rowCount',
            },
          });
        }
      }

      // Chu·∫©n b·ªã T·∫§T C·∫¢ d·ªØ li·ªáu v√† ƒë·ªãnh d·∫°ng v√†o C√ôNG m·ªôt API call
      for (const sheet of sheets) {
        const sheetId = sheetIdMap.get(sheet.sheetName);
        if (sheetId === undefined) {
          this.logger.warn(
            `Kh√¥ng t√¨m th·∫•y sheetId cho sheet ${sheet.sheetName}, b·ªè qua`,
          );
          continue;
        }

        // T·ªêI ∆ØU: S·ª≠ d·ª•ng updateCells ƒë·ªÉ GHI D·ªÆ LI·ªÜU v√† ƒê·ªäNH D·∫†NG c√πng l√∫c
        // Chu·∫©n b·ªã d·ªØ li·ªáu v√† ƒë·ªãnh d·∫°ng cho header
        if (!existingSheets.has(sheet.sheetName)) {
          // T·∫°o m·∫£ng RowData v·ªõi d·ªØ li·ªáu header v√† ƒë·ªãnh d·∫°ng
          const headerRow: {
            values: Array<{
              userEnteredValue: { stringValue: string };
              userEnteredFormat: {
                backgroundColor: { red: number; green: number; blue: number };
                textFormat: { bold: boolean; fontSize: number };
                horizontalAlignment: string;
                verticalAlignment: string;
                wrapStrategy: string;
                padding: {
                  left: number;
                  right: number;
                  top: number;
                  bottom: number;
                };
              };
            }>;
          } = {
            values: sheet.header.map((headerText) => ({
              userEnteredValue: { stringValue: headerText },
              userEnteredFormat: {
                backgroundColor: { red: 0.9, green: 0.9, blue: 0.9 },
                textFormat: { bold: true, fontSize: 12 },
                horizontalAlignment: 'CENTER',
                verticalAlignment: 'MIDDLE',
                wrapStrategy: 'OVERFLOW_CELL',
                padding: { left: 20, right: 20, top: 4, bottom: 4 },
              },
            })),
          };

          // Th√™m y√™u c·∫ßu updateCells cho header
          batchRequests.push({
            updateCells: {
              start: {
                sheetId: sheetId,
                rowIndex: 0,
                columnIndex: 0,
              },
              rows: [headerRow] as any[], // Type assertion to avoid linter error with complex nested types
              fields: 'userEnteredValue,userEnteredFormat',
            },
          });
        }

        // Chu·∫©n b·ªã d·ªØ li·ªáu v√† ƒë·ªãnh d·∫°ng cho data n·∫øu c√≥ d·ªØ li·ªáu
        if (sheet.data.length > 0) {
          // T·∫°o m·∫£ng RowData v·ªõi d·ªØ li·ªáu v√† ƒë·ªãnh d·∫°ng c∆° b·∫£n
          const dataRows = sheet.data.map((row) => ({
            values: row.map((cellValue, columnIndex) => {
              // ƒê·ªãnh d·∫°ng m·∫∑c ƒë·ªãnh cho t·∫•t c·∫£ c√°c √¥
              const baseFormat = {
                horizontalAlignment: 'CENTER',
                verticalAlignment: 'MIDDLE',
                wrapStrategy: 'OVERFLOW_CELL',
                backgroundColor: { red: 1, green: 1, blue: 1 },
                padding: { left: 20, right: 20, top: 2, bottom: 2 },
              };

              // X√°c ƒë·ªãnh lo·∫°i d·ªØ li·ªáu v√† ƒë·ªãnh d·∫°ng ƒë·∫∑c bi·ªát
              let userEnteredValue: {
                stringValue?: string;
                numberValue?: number;
                boolValue?: boolean;
              };
              let specialFormat: {
                numberFormat?: {
                  type: string;
                  pattern?: string;
                };
              } = {};

              // X·ª≠ l√Ω c·ªôt Created Time (c·ªôt th·ª© 23, index = 22)
              if (columnIndex === 22) {
                // ƒê·∫£m b·∫£o ƒë·ªãnh d·∫°ng vƒÉn b·∫£n cho c·ªôt Created Time
                // Lo·∫°i b·ªè d·∫•u nh√°y ƒë∆°n n·∫øu c√≥
                const timeValue =
                  typeof cellValue === 'string'
                    ? cellValue.replace(/^'/, '') // Lo·∫°i b·ªè d·∫•u nh√°y ƒë∆°n ·ªü ƒë·∫ßu n·∫øu c√≥
                    : String(cellValue || '');

                userEnteredValue = { stringValue: timeValue };
                specialFormat = { numberFormat: { type: 'TEXT' } };
              }
              // X·ª≠ l√Ω c√°c c·ªôt s·ªë
              else if (
                sheet.numericColumns?.includes(
                  String.fromCharCode(65 + columnIndex),
                )
              ) {
                // Chuy·ªÉn ƒë·ªïi th√†nh s·ªë n·∫øu c√≥ th·ªÉ
                const numValue: number =
                  typeof cellValue === 'string' && cellValue
                    ? parseFloat(cellValue)
                    : typeof cellValue === 'number'
                      ? cellValue
                      : NaN;
                if (
                  !isNaN(numValue) &&
                  numValue !== null &&
                  numValue !== undefined
                ) {
                  userEnteredValue = { numberValue: numValue };
                  specialFormat = {
                    numberFormat: { type: 'NUMBER', pattern: '#,##0.00' },
                  };
                } else {
                  userEnteredValue = { stringValue: String(cellValue || '') };
                }
              }
              // X·ª≠ l√Ω c√°c lo·∫°i d·ªØ li·ªáu kh√°c
              else if (cellValue === null || cellValue === undefined) {
                userEnteredValue = { stringValue: '' };
              } else if (typeof cellValue === 'number') {
                userEnteredValue = { numberValue: cellValue };
              } else if (typeof cellValue === 'boolean') {
                userEnteredValue = { boolValue: cellValue };
              } else {
                userEnteredValue = { stringValue: String(cellValue) };
              }

              // K·∫øt h·ª£p ƒë·ªãnh d·∫°ng c∆° b·∫£n v√† ƒë·∫∑c bi·ªát
              return {
                userEnteredValue,
                userEnteredFormat: { ...baseFormat, ...specialFormat },
              };
            }),
          }));

          // Th√™m y√™u c·∫ßu updateCells cho d·ªØ li·ªáu
          batchRequests.push({
            updateCells: {
              start: {
                sheetId: sheetId,
                rowIndex: 1, // B·∫Øt ƒë·∫ßu t·ª´ d√≤ng 2 (sau header)
                columnIndex: 0,
              },
              rows: dataRows as {
                values: {
                  userEnteredValue: {
                    stringValue?: string;
                    numberValue?: number;
                    boolValue?: boolean;
                  };
                  userEnteredFormat: {
                    horizontalAlignment: string;
                    verticalAlignment: string;
                    wrapStrategy: string;
                    backgroundColor: {
                      red: number;
                      green: number;
                      blue: number;
                    };
                    padding: {
                      left: number;
                      right: number;
                      top: number;
                      bottom: number;
                    };
                    numberFormat?: { type: string; pattern?: string };
                  };
                }[];
              }[],
              fields: 'userEnteredValue,userEnteredFormat',
            },
          });
        }

        // Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc t·ªëi thi·ªÉu cho c√°c c·ªôt
        batchRequests.push({
          updateDimensionProperties: {
            range: {
              sheetId,
              dimension: 'COLUMNS',
              startIndex: 0,
              endIndex: sheet.header.length,
            },
            properties: {
              pixelSize: 150, // Thi·∫øt l·∫≠p chi·ªÅu r·ªông t·ªëi thi·ªÉu l√† 150 pixels
            },
            fields: 'pixelSize',
          },
        });

        // Auto resize columns
        batchRequests.push({
          autoResizeDimensions: {
            dimensions: {
              sheetId,
              dimension: 'COLUMNS',
              startIndex: 0,
              endIndex: sheet.header.length,
            },
          },
        });
      }

      // Th·ª±c thi T·∫§T C·∫¢ c√°c thay ƒë·ªïi trong M·ªòT l·∫ßn g·ªçi API duy nh·∫•t
      this.logger.debug(
        `Th·ª±c hi·ªán API call ƒë·ªÉ ghi v√† ƒë·ªãnh d·∫°ng ${sheets.length} sheets...`,
      );
      await this.executeWithRetry(async () => {
        const sheetsClient = await this.getSheetsClient();
        return sheetsClient.spreadsheets.batchUpdate({
          spreadsheetId,
          requestBody: { requests: batchRequests },
        });
      });

      this.logger.log(
        `ƒê√£ ghi v√† ƒë·ªãnh d·∫°ng ${sheets.length} sheets trong c√πng m·ªôt API call (si√™u t·ªëi ∆∞u)`,
      );

      // K·∫øt th√∫c tracking
      if (taskName && this.currentTaskName === taskName) {
        this.endTaskTracking();
      }
    } catch (error) {
      if (taskName && this.currentTaskName === taskName) {
        this.endTaskTracking();
      }
      throw error;
    }
  }

  /**
   * Ph∆∞∆°ng th·ª©c t·ªëi ∆∞u k·∫øt h·ª£p x√≥a, ghi v√† ƒë·ªãnh d·∫°ng d·ªØ li·ªáu v√†o m·ªôt sheet
   * Gi·∫£m s·ªë l·∫ßn g·ªçi API t·ª´ 6-7 xu·ªëng c√≤n 2-3 l·∫ßn
   */
  async writeAndFormatSheet({
    spreadsheetId,
    sheetName,
    header,
    data,
    numericColumns,
    taskName,
  }: {
    spreadsheetId: string;
    sheetName: string;
    header: string[];
    data: any[][];
    numericColumns?: string[];
    taskName?: string;
  }): Promise<sheets_v4.Schema$UpdateValuesResponse> {
    // B·∫Øt ƒë·∫ßu tracking n·∫øu c√≥ taskName
    if (taskName && !this.currentTaskName) {
      this.startTaskTracking(taskName);
    }

    this.logger.debug(
      `üöÄ writeAndFormatSheet: Ghi v√† ƒë·ªãnh d·∫°ng sheet ${sheetName} (${data.length} d√≤ng x ${data[0]?.length || 0} c·ªôt)`,
    );

    try {
      // ƒê·∫£m b·∫£o sheet t·ªìn t·∫°i tr∆∞·ªõc khi thao t√°c
      await this.ensureSheetExistsWithHeader(spreadsheetId, sheetName, header);

      // Ghi d·ªØ li·ªáu v√†o sheet
      const values = [...data]; // Kh√¥ng c·∫ßn th√™m header v√¨ ƒë√£ ƒë∆∞·ª£c th√™m khi t·∫°o sheet

      // L·∫•y sheetId ƒë·ªÉ ƒë·ªãnh d·∫°ng
      const sheetId = await this.getSheetId(spreadsheetId, sheetName);

      if (sheetId === null) {
        throw new Error(`Kh√¥ng t√¨m th·∫•y sheetId cho sheet ${sheetName}`);
      }

      // Ghi data t·ª´ d√≤ng 2 (d∆∞·ªõi header)
      const writeResult = await this.executeWithRetry(async () => {
        const sheets = await this.getSheetsClient();
        return sheets.spreadsheets.values.update({
          spreadsheetId,
          range: `${sheetName}!A2:${String.fromCharCode(65 + header.length - 1)}${values.length + 1}`,
          valueInputOption: 'USER_ENTERED',
          requestBody: { values },
        });
      });

      // ƒê·ªãnh d·∫°ng b·∫£ng trong m·ªôt l·∫ßn g·ªçi
      const formatRequests: any[] = [
        // ƒê·ªãnh d·∫°ng c∆° b·∫£n cho t·∫•t c·∫£ c√°c √¥ d·ªØ li·ªáu
        {
          repeatCell: {
            range: {
              sheetId,
              startRowIndex: 1, // B·∫Øt ƒë·∫ßu t·ª´ d√≤ng 2 (sau header)
              endRowIndex: values.length + 1,
              startColumnIndex: 0,
              endColumnIndex: header.length,
            },
            cell: {
              userEnteredFormat: {
                horizontalAlignment: 'CENTER',
                verticalAlignment: 'MIDDLE',
                wrapStrategy: 'OVERFLOW_CELL',
                backgroundColor: {
                  red: 1,
                  green: 1,
                  blue: 1,
                },
                padding: {
                  left: 20, // TƒÉng padding b√™n tr√°i
                  right: 20, // TƒÉng padding b√™n ph·∫£i
                  top: 2,
                  bottom: 2,
                },
              },
            },
            fields: 'userEnteredFormat',
          },
        },
        // Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc t·ªëi thi·ªÉu cho c√°c c·ªôt
        {
          updateDimensionProperties: {
            range: {
              sheetId,
              dimension: 'COLUMNS',
              startIndex: 0,
              endIndex: header.length,
            },
            properties: {
              pixelSize: 150, // Thi·∫øt l·∫≠p chi·ªÅu r·ªông t·ªëi thi·ªÉu l√† 150 pixels
            },
            fields: 'pixelSize',
          },
        },
        // Auto resize columns ƒë·ªÉ cƒÉn ch·ªânh theo n·ªôi dung th·ª±c t·∫ø
        {
          autoResizeDimensions: {
            dimensions: {
              sheetId,
              dimension: 'COLUMNS',
              startIndex: 0,
              endIndex: header.length,
            },
          },
        },
      ];

      // ƒê·∫∑c bi·ªát ƒë·ªãnh d·∫°ng c·ªôt Created Time l√† TEXT ƒë·ªÉ tr√°nh chuy·ªÉn ƒë·ªïi sang s·ªë
      formatRequests.push({
        repeatCell: {
          range: {
            sheetId,
            startRowIndex: 0,
            endRowIndex: values.length + 1,
            startColumnIndex: 22, // C·ªôt W - Created Time (th·ª© 23)
            endColumnIndex: 23,
          },
          cell: {
            userEnteredFormat: {
              numberFormat: {
                type: 'TEXT',
              },
            },
          },
          fields: 'userEnteredFormat.numberFormat',
        },
      });

      // Th√™m ƒë·ªãnh d·∫°ng s·ªë cho c√°c c·ªôt ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
      if (numericColumns?.length) {
        for (const colLetter of numericColumns) {
          const colIndex = colLetter.charCodeAt(0) - 65;
          // B·ªè qua n·∫øu ƒë√¢y l√† c·ªôt Created Time
          if (colIndex === 22) continue;

          formatRequests.push({
            repeatCell: {
              range: {
                sheetId,
                startRowIndex: 1,
                endRowIndex: values.length + 1,
                startColumnIndex: colIndex,
                endColumnIndex: colIndex + 1,
              },
              cell: {
                userEnteredFormat: {
                  numberFormat: {
                    type: 'NUMBER',
                    pattern: '#,##0.00',
                  },
                },
              },
              fields: 'userEnteredFormat.numberFormat',
            },
          });
        }
      }

      // Th·ª±c hi·ªán format trong m·ªôt l·∫ßn g·ªçi
      await this.executeWithRetry(async () => {
        const sheets = await this.getSheetsClient();
        return sheets.spreadsheets.batchUpdate({
          spreadsheetId,
          requestBody: { requests: formatRequests },
        });
      });

      this.logger.log(
        `ƒê√£ ghi v√† ƒë·ªãnh d·∫°ng ${values.length} d√≤ng v√†o sheet ${sheetName} (t·ªëi ∆∞u)`,
      );

      // K·∫øt th√∫c tracking n·∫øu ƒë√£ b·∫Øt ƒë·∫ßu
      if (taskName && this.currentTaskName === taskName) {
        this.endTaskTracking();
      }

      return writeResult.data;
    } catch (error) {
      if (taskName && this.currentTaskName === taskName) {
        this.endTaskTracking();
      }
      throw error;
    }
  }
}
