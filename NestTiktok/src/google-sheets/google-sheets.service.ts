// src/google-sheets/google-sheets.service.ts

import { Injectable, Logger } from '@nestjs/common';
import { google, sheets_v4, Auth, drive_v3 } from 'googleapis';
import { join } from 'path';
import * as fs from 'fs';
import {
  AppendToSheetParams,
  WriteToSheetParams,
  ReadSheetParams,
  AddSheetParams,
  SheetValues,
} from '../types/google-sheets';

@Injectable()
export class GoogleSheetsService {
  private readonly logger = new Logger(GoogleSheetsService.name);
  private readonly auth: Auth.GoogleAuth;

  constructor() {
    // T√¨m ƒë∆∞·ªùng d·∫´n ƒë·∫øn file service-account.json t·ª´ nhi·ªÅu v·ªã tr√≠ c√≥ th·ªÉ
    let keyFilePath: string | undefined;
    const possiblePaths = [
      join(process.cwd(), 'src/google-sheets/service-account.json'),
      join(process.cwd(), 'dist/google-sheets/service-account.json'),
      join(__dirname, 'service-account.json'),
    ];

    for (const filePath of possiblePaths) {
      if (fs.existsSync(filePath)) {
        keyFilePath = filePath;
        this.logger.log(`Using service account key file at: ${keyFilePath}`);
        break;
      }
    }

    if (!keyFilePath) {
      this.logger.error('Could not find service-account.json file!');
      throw new Error('Service account key file not found');
    }

    this.auth = new google.auth.GoogleAuth({
      keyFile: keyFilePath,
      scopes: [
        'https://www.googleapis.com/auth/spreadsheets',
        'https://www.googleapis.com/auth/drive',
      ],
    });
  }

  /**
   * Utility method ƒë·ªÉ x·ª≠ l√Ω retry v·ªõi exponential backoff cho Google API calls
   */
  private async executeWithRetry<T>(
    operation: () => Promise<T>,
    maxRetries = 5,
  ): Promise<T> {
    let retries = 0;
    while (true) {
      try {
        return await operation();
      } catch (error: unknown) {
        retries++;
        if (retries > maxRetries) {
          this.logger.error(
            `‚ùå ƒê√£ v∆∞·ª£t qu√° s·ªë l·∫ßn retry (${maxRetries}), n√©m l·ªói:`,
            error,
          );
          throw error;
        }

        // Ki·ªÉm tra n·∫øu l√† l·ªói c·∫ßn retry
        let shouldRetry = false;
        let isRateLimit = false;

        if (error && typeof error === 'object') {
          const err = error as {
            response?: { status?: number };
            status?: number;
            code?: number | string;
            message?: string;
          };

          // Ki·ªÉm tra l·ªói 503 (Service Unavailable)
          const isServiceUnavailable =
            err.response?.status === 503 ||
            err.status === 503 ||
            err.code === 503;

          // Ki·ªÉm tra l·ªói 429 (Rate Limit Exceeded)
          isRateLimit =
            err.response?.status === 429 ||
            err.status === 429 ||
            err.code === 429 ||
            (typeof err.message === 'string' &&
              err.message.includes('Quota exceeded')) ||
            (typeof err.message === 'string' &&
              err.message.includes('Rate limit exceeded')) ||
            (typeof err.message === 'string' &&
              err.message.includes('rateLimitExceeded'));

          shouldRetry = isServiceUnavailable || isRateLimit;
        }

        if (!shouldRetry) {
          throw error; // N·∫øu kh√¥ng ph·∫£i l·ªói c·∫ßn retry, n√©m l·ªói ngay
        }

        // Exponential backoff theo h∆∞·ªõng d·∫´n c·ªßa Google v·ªõi th·ªùi gian d√†i h∆°n
        const baseDelay = Math.pow(2, retries) * 2000; // TƒÉng t·ª´ 1000 l√™n 2000ms
        const randomJitter = Math.random() * 2000; // TƒÉng t·ª´ 1000 l√™n 2000ms
        const maxBackoff = isRateLimit ? 120000 : 90000; // TƒÉng t·ª´ 64000/60000 l√™n 120000/90000ms
        const waitTime = Math.min(baseDelay + randomJitter, maxBackoff);

        if (isRateLimit) {
          this.logger.warn(
            `üö´ Google Sheets quota exceeded. Retry ${retries}/${maxRetries} sau ${Math.round(
              waitTime / 1000,
            )}s...`,
          );
        } else {
          this.logger.warn(
            `‚ö†Ô∏è Google Sheets service unavailable. Retry ${retries}/${maxRetries} sau ${Math.round(
              waitTime / 1000,
            )}s...`,
          );
        }

        await new Promise((resolve) => setTimeout(resolve, waitTime));
      }
    }
  }

  /**
   * T·∫°o v√† tr·∫£ v·ªÅ m·ªôt client API Google Sheets
   * @returns Promise v·ªõi client Sheets ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c
   */
  private async getSheetsClient(): Promise<sheets_v4.Sheets> {
    const client = await this.auth.getClient();
    // @ts-expect-error - Google API typing issues with auth client
    return google.sheets({ version: 'v4', auth: client });
  }

  /**
   * T·∫°o v√† tr·∫£ v·ªÅ m·ªôt client API Google Drive
   * @returns Promise v·ªõi client Drive ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c
   */
  private async getDriveClient(): Promise<drive_v3.Drive> {
    const client = await this.auth.getClient();
    // @ts-expect-error - Google API typing issues with auth client
    return google.drive({ version: 'v3', auth: client });
  }

  /**
   * C·∫≠p nh·∫≠t gi√° tr·ªã trong m·ªôt ph·∫°m vi c·ª• th·ªÉ c·ªßa b·∫£ng t√≠nh
   * @param spreadsheetId - ID c·ªßa b·∫£ng t√≠nh
   * @param range - K√Ω hi·ªáu A1 c·ªßa ph·∫°m vi c·∫ßn c·∫≠p nh·∫≠t
   * @param values - C√°c gi√° tr·ªã c·∫ßn ghi v√†o ph·∫°m vi
   * @returns Promise v·ªõi d·ªØ li·ªáu ph·∫£n h·ªìi
   */
  async writeToSheet({
    spreadsheetId,
    range,
    values,
  }: WriteToSheetParams): Promise<any> {
    return this.executeWithRetry(async () => {
      const sheets = await this.getSheetsClient();
      const res = await sheets.spreadsheets.values.update({
        spreadsheetId,
        range,
        valueInputOption: 'USER_ENTERED',
        requestBody: {
          values,
        },
      });
      return res.data;
    });
  }

  /**
   * Th√™m gi√° tr·ªã v√†o cu·ªëi m·ªôt ph·∫°m vi c·ª• th·ªÉ c·ªßa b·∫£ng t√≠nh
   * @param spreadsheetId - ID c·ªßa b·∫£ng t√≠nh
   * @param range - K√Ω hi·ªáu A1 c·ªßa ph·∫°m vi c·∫ßn th√™m v√†o
   * @param values - C√°c gi√° tr·ªã c·∫ßn th√™m
   * @returns Promise v·ªõi d·ªØ li·ªáu ph·∫£n h·ªìi
   */
  async appendToSheet({
    spreadsheetId,
    range,
    values,
  }: AppendToSheetParams): Promise<any> {
    const sheets = await this.getSheetsClient();

    const res = await sheets.spreadsheets.values.append({
      spreadsheetId,
      range,
      valueInputOption: 'USER_ENTERED',
      insertDataOption: 'INSERT_ROWS',
      requestBody: { values },
    });

    return res.data;
  }

  /**
   * ƒê·ªçc gi√° tr·ªã t·ª´ m·ªôt ph·∫°m vi c·ª• th·ªÉ c·ªßa b·∫£ng t√≠nh
   * @param spreadsheetId - ID c·ªßa b·∫£ng t√≠nh
   * @param range - K√Ω hi·ªáu A1 c·ªßa ph·∫°m vi c·∫ßn ƒë·ªçc
   * @returns Promise v·ªõi c√°c gi√° tr·ªã t·ª´ ph·∫°m vi ƒë√£ ch·ªâ ƒë·ªãnh
   */
  async readSheet({
    spreadsheetId,
    range,
  }: ReadSheetParams): Promise<SheetValues> {
    return this.executeWithRetry(async () => {
      const sheets = await this.getSheetsClient();
      const res = await sheets.spreadsheets.values.get({
        spreadsheetId,
        range,
      });
      return (res.data.values || []) as SheetValues;
    });
  }

  /**
   * Ki·ªÉm tra xem m·ªôt sheet v·ªõi ti√™u ƒë·ªÅ ƒë√£ cho c√≥ t·ªìn t·∫°i trong b·∫£ng t√≠nh kh√¥ng
   * @param spreadsheetId - ID c·ªßa b·∫£ng t√≠nh
   * @param sheetTitle - Ti√™u ƒë·ªÅ c·ªßa sheet c·∫ßn ki·ªÉm tra
   * @returns Promise v·ªõi gi√° tr·ªã boolean cho bi·∫øt sheet c√≥ t·ªìn t·∫°i hay kh√¥ng
   */
  async sheetExists(
    spreadsheetId: string,
    sheetTitle: string,
  ): Promise<boolean> {
    return this.executeWithRetry(async () => {
      const sheets = await this.getSheetsClient();
      const res = await sheets.spreadsheets.get({
        spreadsheetId,
        fields: 'sheets.properties.title',
      });

      const sheetTitles = res.data.sheets?.map(
        (sheet) => sheet.properties?.title,
      );
      return sheetTitles?.includes(sheetTitle) ?? false;
    });
  }

  /**
   * Th√™m m·ªôt sheet m·ªõi v√†o b·∫£ng t√≠nh hi·ªán c√≥
   * @param spreadsheetId - ID c·ªßa b·∫£ng t√≠nh
   * @param sheetTitle - Ti√™u ƒë·ªÅ cho sheet m·ªõi
   * @returns Promise v·ªõi d·ªØ li·ªáu ph·∫£n h·ªìi ho·∫∑c tr·∫°ng th√°i t·ªìn t·∫°i
   */
  async addSheet({ spreadsheetId, sheetTitle }: AddSheetParams): Promise<any> {
    const exists = await this.sheetExists(spreadsheetId, sheetTitle);
    if (exists) {
      this.logger.log(`Sheet "${sheetTitle}" already exists.`);
      return { exists: true };
    }

    return this.executeWithRetry(async () => {
      const sheets = await this.getSheetsClient();

      const request: sheets_v4.Params$Resource$Spreadsheets$Batchupdate = {
        spreadsheetId,
        requestBody: {
          requests: [
            {
              addSheet: {
                properties: {
                  title: sheetTitle,
                  gridProperties: {
                    rowCount: 1000,
                    columnCount: 26,
                  },
                },
              },
            },
          ],
        },
      };

      const res = await sheets.spreadsheets.batchUpdate(request);
      this.logger.log(`Added sheet "${sheetTitle}"`);
      return res.data;
    });
  }

  /**
   * Chia s·∫ª b·∫£ng t√≠nh v·ªõi m·ªôt ng∆∞·ªùi d√πng c·ª• th·ªÉ
   * @param spreadsheetId - ID c·ªßa b·∫£ng t√≠nh c·∫ßn chia s·∫ª
   * @param email - ƒê·ªãa ch·ªâ email c·ªßa ng∆∞·ªùi d√πng c·∫ßn chia s·∫ª
   * @param role - Vai tr√≤ c·∫•p cho ng∆∞·ªùi d√πng (writer ho·∫∑c reader)
   * @returns Promise ho√†n th√†nh khi vi·ªác chia s·∫ª ho√†n t·∫•t
   */
  async shareSheet(
    spreadsheetId: string,
    email: string,
    role: 'writer' | 'reader' = 'reader',
  ): Promise<void> {
    try {
      const drive = await this.getDriveClient();
      await drive.permissions.create({
        fileId: spreadsheetId,
        requestBody: {
          type: 'user',
          role: role,
          emailAddress: email,
        },
        fields: 'id',
      });
      this.logger.log(`Sheet ${spreadsheetId} shared with ${email} as ${role}`);
    } catch (error) {
      this.logger.error(
        `Error sharing sheet ${spreadsheetId} with ${email}:`,
        error,
      );
      throw error;
    }
  }

  /**
   * Thu h·ªìi quy·ªÅn truy c·∫≠p c·ªßa m·ªôt ng∆∞·ªùi d√πng ƒë·ªëi v·ªõi b·∫£ng t√≠nh
   * @param spreadsheetId - ID c·ªßa b·∫£ng t√≠nh
   * @param email - ƒê·ªãa ch·ªâ email c·ªßa ng∆∞·ªùi d√πng c·∫ßn thu h·ªìi quy·ªÅn
   * @returns Promise ho√†n th√†nh khi vi·ªác thu h·ªìi quy·ªÅn ho√†n t·∫•t
   */
  async revokeAccess(spreadsheetId: string, email: string): Promise<void> {
    try {
      const drive = await this.getDriveClient();

      // T√¨m permission ID d·ª±a tr√™n email
      const response = await drive.permissions.list({
        fileId: spreadsheetId,
        fields: 'permissions(id,emailAddress)',
      });

      const permissions = response.data.permissions || [];
      const permission = permissions.find((p) => p.emailAddress === email);

      if (permission && permission.id) {
        // X√≥a quy·ªÅn truy c·∫≠p
        await drive.permissions.delete({
          fileId: spreadsheetId,
          permissionId: permission.id,
        });
        this.logger.log(
          `Access revoked for ${email} on sheet ${spreadsheetId}`,
        );
      } else {
        this.logger.warn(
          `No permission found for ${email} on sheet ${spreadsheetId}`,
        );
      }
    } catch (error) {
      this.logger.error(
        `Error revoking access for ${email} on sheet ${spreadsheetId}:`,
        error instanceof Error ? error.message : String(error),
      );
      throw error;
    }
  }

  /**
   * T·∫°o m·ªôt b·∫£ng t√≠nh m·ªõi v·ªõi ti√™u ƒë·ªÅ ƒë√£ cho
   * @param title - Ti√™u ƒë·ªÅ cho b·∫£ng t√≠nh m·ªõi
   * @param shareWithEmail - Email t√πy ch·ªçn ƒë·ªÉ chia s·∫ª b·∫£ng t√≠nh
   * @returns Promise v·ªõi ID c·ªßa b·∫£ng t√≠nh ƒë√£ t·∫°o
   */
  async createSheet(
    title: string,
    shareWithEmail?: string,
  ): Promise<string | null | undefined> {
    const sheets = await this.getSheetsClient();
    const res = await sheets.spreadsheets.create({
      requestBody: {
        properties: {
          title,
        },
      },
    });

    const spreadsheetId = res.data.spreadsheetId;

    // N·∫øu c√≥ email ƒë∆∞·ª£c cung c·∫•p, chia s·∫ª sheet v·ªõi ng∆∞·ªùi d√πng ƒë√≥
    if (shareWithEmail && typeof shareWithEmail === 'string' && spreadsheetId) {
      await this.shareSheet(spreadsheetId, shareWithEmail);
    }

    return spreadsheetId;
  }

  async batchUpdateToSheet({
    spreadsheetId,
    data,
  }: {
    spreadsheetId: string;
    data: { range: string; values: any[][] }[];
  }): Promise<any> {
    const sheets = await this.getSheetsClient();
    await sheets.spreadsheets.values.batchUpdate({
      spreadsheetId,
      requestBody: {
        valueInputOption: 'USER_ENTERED',
        data, // Array of { range, values }
      },
    });
  }

  /**
   * ƒê·ªãnh d·∫°ng b·∫£ng: ch·ªâ header in ƒë·∫≠m, c√°c d·ªØ li·ªáu kh√°c b√¨nh th∆∞·ªùng
   * @param spreadsheetId - ID c·ªßa b·∫£ng t√≠nh
   * @param sheetName - T√™n c·ªßa sheet
   * @param totalRows - T·ªïng s·ªë h√†ng
   * @param options - T√πy ch·ªçn ƒë·ªãnh d·∫°ng (numericColumns: danh s√°ch c√°c c·ªôt c·∫ßn ƒë·ªãnh d·∫°ng s·ªë)
   * @returns Promise ho√†n th√†nh khi vi·ªác ƒë·ªãnh d·∫°ng ho√†n t·∫•t
   */
  async formatCompleteTable(
    spreadsheetId: string,
    sheetName: string,
    totalRows: number,
    options?: { numericColumns?: string[] },
  ): Promise<any> {
    const sheets = await this.getSheetsClient();
    const sheetId = await this.getSheetId(spreadsheetId, sheetName);

    if (sheetId === null) {
      this.logger.error(`Sheet ID kh√¥ng t√¨m th·∫•y cho sheet ${sheetName}`);
      return;
    }

    // B∆∞·ªõc 1: ƒê·∫ßu ti√™n ƒë·ªãnh d·∫°ng T·∫§T C·∫¢ c√°c √¥ v·ªõi ƒë·ªãnh d·∫°ng c∆° b·∫£n (kh√¥ng in ƒë·∫≠m, n·ªÅn tr·∫Øng)
    await this.executeWithRetry(async () => {
      return sheets.spreadsheets.batchUpdate({
        spreadsheetId,
        requestBody: {
          requests: [
            // ƒê·ªãnh d·∫°ng c∆° b·∫£n cho t·∫•t c·∫£ c√°c √¥ (bao g·ªìm c·∫£ header)
            {
              repeatCell: {
                range: {
                  sheetId,
                  startRowIndex: 0,
                  endRowIndex: totalRows,
                  startColumnIndex: 0,
                  endColumnIndex: 24,
                },
                cell: {
                  userEnteredFormat: {
                    horizontalAlignment: 'CENTER',
                    verticalAlignment: 'MIDDLE',
                    wrapStrategy: 'OVERFLOW_CELL',
                    backgroundColor: {
                      red: 1,
                      green: 1,
                      blue: 1,
                    },
                    textFormat: {
                      bold: false,
                      fontSize: 10,
                    },
                    padding: {
                      left: 10,
                      right: 10,
                      top: 2,
                      bottom: 2,
                    },
                  },
                },
                fields:
                  'userEnteredFormat.horizontalAlignment,userEnteredFormat.verticalAlignment,userEnteredFormat.wrapStrategy,userEnteredFormat.backgroundColor,userEnteredFormat.textFormat,userEnteredFormat.padding',
              },
            },
          ],
        },
      });
    });

    // B∆∞·ªõc 2: Sau ƒë√≥ m·ªõi ƒë·ªãnh d·∫°ng ri√™ng cho header
    await this.executeWithRetry(async () => {
      return sheets.spreadsheets.batchUpdate({
        spreadsheetId,
        requestBody: {
          requests: [
            // ƒê·ªãnh d·∫°ng ƒë·∫∑c bi·ªát cho header
            {
              repeatCell: {
                range: {
                  sheetId,
                  startRowIndex: 0,
                  endRowIndex: 1,
                  startColumnIndex: 0,
                  endColumnIndex: 24,
                },
                cell: {
                  userEnteredFormat: {
                    backgroundColor: {
                      red: 0.9,
                      green: 0.9,
                      blue: 0.9,
                    },
                    textFormat: {
                      bold: true,
                      fontSize: 12,
                    },
                    padding: {
                      left: 10,
                      right: 10,
                      top: 2,
                      bottom: 2,
                    },
                  },
                },
                fields:
                  'userEnteredFormat.backgroundColor,userEnteredFormat.textFormat,userEnteredFormat.padding',
              },
            },
            // C·ªë ƒë·ªãnh c·ªôt ƒë·∫ßu ti√™n v√† header
            {
              updateSheetProperties: {
                properties: {
                  sheetId,
                  gridProperties: {
                    frozenColumnCount: 1,
                    frozenRowCount: 1,
                  },
                },
                fields:
                  'gridProperties.frozenColumnCount,gridProperties.frozenRowCount',
              },
            },
          ],
        },
      });
    });

    // B∆∞·ªõc 3: ƒê·ªãnh d·∫°ng c√°c c·ªôt s·ªë (n·∫øu c√≥)
    if (options?.numericColumns && options.numericColumns.length > 0) {
      const requests = options.numericColumns.map((colLetter) => {
        // Chuy·ªÉn ƒë·ªïi ch·ªØ c√°i th√†nh s·ªë c·ªôt (A=0, B=1, ...)
        const colIndex = colLetter.charCodeAt(0) - 65; // 'A'.charCodeAt(0) = 65

        return {
          repeatCell: {
            range: {
              sheetId,
              startRowIndex: 1, // B·∫Øt ƒë·∫ßu t·ª´ d√≤ng sau header
              endRowIndex: totalRows,
              startColumnIndex: colIndex,
              endColumnIndex: colIndex + 1,
            },
            cell: {
              userEnteredFormat: {
                numberFormat: {
                  type: 'NUMBER',
                  pattern: '#,##0.00', // ƒê·ªãnh d·∫°ng s·ªë ki·ªÉu US v·ªõi t·ªëi ƒëa 2 s·ªë th·∫≠p ph√¢n (kh√¥ng hi·ªÉn th·ªã s·ªë 0 th·ª´a)
                },
              },
            },
            fields: 'userEnteredFormat.numberFormat',
          },
        };
      });

      await this.executeWithRetry(async () => {
        return sheets.spreadsheets.batchUpdate({
          spreadsheetId,
          requestBody: {
            requests,
          },
        });
      });

      this.logger.log(
        `ƒê√£ √°p d·ª•ng ƒë·ªãnh d·∫°ng s·ªë ki·ªÉu US cho c√°c c·ªôt: ${options.numericColumns.join(
          ', ',
        )}`,
      );
    }

    // T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh chi·ªÅu r·ªông c√°c c·ªôt
    await this.executeWithRetry(async () => {
      return sheets.spreadsheets.batchUpdate({
        spreadsheetId,
        requestBody: {
          requests: [
            {
              autoResizeDimensions: {
                dimensions: {
                  sheetId,
                  dimension: 'COLUMNS',
                  startIndex: 0,
                  endIndex: 24,
                },
              },
            },
          ],
        },
      });
    });

    this.logger.log(
      `ƒê√£ √°p d·ª•ng ƒë·ªãnh d·∫°ng cho sheet ${sheetName} - header m√†u x√°m, n·ªôi dung m√†u tr·∫Øng, v·ªõi k√≠ch th∆∞·ªõc ph√π h·ª£p`,
    );
    return true;
  }

  /**
   * L·∫•y sheetId t·ª´ t√™n sheet
   * @param spreadsheetId - ID c·ªßa b·∫£ng t√≠nh
   * @param sheetName - T√™n c·ªßa sheet
   * @returns Promise v·ªõi sheetId
   */
  private async getSheetId(
    spreadsheetId: string,
    sheetName: string,
  ): Promise<number | null> {
    return this.executeWithRetry(async () => {
      const sheets = await this.getSheetsClient();
      const response = await sheets.spreadsheets.get({
        spreadsheetId,
        fields: 'sheets.properties',
      });

      const sheet = response.data.sheets?.find(
        (s) => s.properties?.title === sheetName,
      );
      return sheet?.properties?.sheetId || null;
    });
  }

  /**
   * X√≥a t·∫•t c·∫£ d·ªØ li·ªáu trong sheet tr·ª´ h√†ng header
   * @param spreadsheetId - ID c·ªßa b·∫£ng t√≠nh
   * @param sheetName - T√™n c·ªßa sheet
   * @returns Promise ho√†n th√†nh khi vi·ªác x√≥a ho√†n t·∫•t
   */
  async clearSheetData(spreadsheetId: string, sheetName: string): Promise<any> {
    // ƒê·ªçc d·ªØ li·ªáu ƒë·ªÉ x√°c ƒë·ªãnh s·ªë l∆∞·ª£ng h√†ng
    const data = await this.readSheet({
      spreadsheetId,
      range: `${sheetName}!A:Z`,
    });

    // N·∫øu sheet tr·ªëng ho·∫∑c ch·ªâ c√≥ header
    if (data.length <= 1) {
      this.logger.log(
        `Sheet ${sheetName} is empty or has only header. No need to clear.`,
      );
      return;
    }

    // X√≥a t·∫•t c·∫£ d·ªØ li·ªáu t·ª´ h√†ng 2 tr·ªü ƒëi (gi·ªØ l·∫°i header)
    return this.executeWithRetry(async () => {
      const sheets = await this.getSheetsClient();
      return sheets.spreadsheets.values.clear({
        spreadsheetId,
        range: `${sheetName}!A2:Z${data.length}`,
      });
    });
  }

  /**
   * Chu·∫©n b·ªã ƒë·ªãnh d·∫°ng cho v√πng d·ªØ li·ªáu tr∆∞·ªõc khi th√™m d·ªØ li·ªáu m·ªõi
   * @param spreadsheetId - ID c·ªßa b·∫£ng t√≠nh
   * @param sheetName - T√™n c·ªßa sheet
   * @param startRow - D√≤ng b·∫Øt ƒë·∫ßu (th∆∞·ªùng l√† 1 - sau header)
   * @param numRows - S·ªë d√≤ng c·∫ßn chu·∫©n b·ªã
   * @returns Promise ho√†n th√†nh khi vi·ªác ƒë·ªãnh d·∫°ng ho√†n t·∫•t
   */
  async prepareDataArea(
    spreadsheetId: string,
    sheetName: string,
    startRow: number,
    numRows: number,
  ): Promise<any> {
    const sheetId = await this.getSheetId(spreadsheetId, sheetName);

    if (sheetId === null) {
      this.logger.error(`Sheet ID kh√¥ng t√¨m th·∫•y cho sheet ${sheetName}`);
      return;
    }

    const endRow = startRow + numRows;

    // Thi·∫øt l·∫≠p ƒë·ªãnh d·∫°ng cho v√πng d·ªØ li·ªáu (kh√¥ng in ƒë·∫≠m, n·ªÅn tr·∫Øng, c·ª° ch·ªØ 10)
    // S·ª≠ d·ª•ng userEnteredFormat thay v√¨ c√°c tr∆∞·ªùng ri√™ng l·∫ª
    await this.executeWithRetry(async () => {
      const sheets = await this.getSheetsClient();
      return sheets.spreadsheets.batchUpdate({
        spreadsheetId,
        requestBody: {
          requests: [
            {
              repeatCell: {
                range: {
                  sheetId,
                  startRowIndex: startRow,
                  endRowIndex: endRow,
                  startColumnIndex: 0,
                  endColumnIndex: 24,
                },
                cell: {
                  userEnteredFormat: {
                    textFormat: {
                      bold: false,
                      fontSize: 10,
                    },
                    backgroundColor: {
                      red: 1,
                      green: 1,
                      blue: 1,
                    },
                    horizontalAlignment: 'CENTER',
                    verticalAlignment: 'MIDDLE',
                    // Thi·∫øt l·∫≠p t·∫•t c·∫£ c√°c thu·ªôc t√≠nh ƒë·ªãnh d·∫°ng kh√°c v·ªÅ m·∫∑c ƒë·ªãnh
                    numberFormat: {
                      type: 'TEXT',
                    },
                    borders: {
                      top: {
                        style: 'SOLID',
                        color: {
                          red: 0.9,
                          green: 0.9,
                          blue: 0.9,
                        },
                      },
                      bottom: {
                        style: 'SOLID',
                        color: {
                          red: 0.9,
                          green: 0.9,
                          blue: 0.9,
                        },
                      },
                      left: {
                        style: 'SOLID',
                        color: {
                          red: 0.9,
                          green: 0.9,
                          blue: 0.9,
                        },
                      },
                      right: {
                        style: 'SOLID',
                        color: {
                          red: 0.9,
                          green: 0.9,
                          blue: 0.9,
                        },
                      },
                    },
                  },
                },
                fields: 'userEnteredFormat',
              },
            },
          ],
        },
      });
    });

    this.logger.log(
      `ƒê√£ chu·∫©n b·ªã ƒë·ªãnh d·∫°ng ho√†n ch·ªânh cho v√πng d·ªØ li·ªáu ${sheetName} t·ª´ d√≤ng ${startRow + 1} ƒë·∫øn ${endRow}`,
    );
    return true;
  }
}
