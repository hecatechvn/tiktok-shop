import { Injectable } from '@nestjs/common';
import { extractOrderData } from 'src/common/extractOrderData';
import {
  AllOrdersResponse,
  BaseResponse,
  OrdersResponse,
  RefreshTokenResponse,
  ShopCipherResponse,
  TokenResponse,
} from 'src/types';
import { GRANT_TYPE } from 'src/enum';
import { isValidBodyValue } from 'src/lib/validBodyValue';
import { CommonParams, RequestOption, QueryParams } from 'src/types';
import { ExtractedOrderItem, Order } from 'src/types/order';
// import * as fs from 'fs';
// import * as path from 'path';

import { startOfMonth, endOfDay, setDate, format } from 'date-fns';
import {
  getCurrentDateByRegion,
  getDateDaysAgoByRegion,
  toUnixTimestampByRegion,
  getTimezoneByRegion,
} from 'src/utils/date';
import { sendRequest } from 'src/common/sendReq';

@Injectable()
export class TiktokService {
  /**
   * L·∫•y access token t·ª´ auth code
   */
  async getAccessToken<T extends BaseResponse = TokenResponse>(
    data: CommonParams,
  ): Promise<T> {
    const { app_key, app_secret, auth_code } = data;
    const requestOption: RequestOption = {
      uri: 'https://auth.tiktok-shops.com/api/v2/token/get',
      qs: {
        auth_code: auth_code,
        app_secret: app_secret,
        app_key: app_key,
        grant_type: GRANT_TYPE.AUTHORIZED_CODE,
      },
      body: {},
    };

    try {
      const response = await sendRequest<T>(requestOption, app_secret);
      return response;
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * L·∫•y shop cipher
   */
  async getShopCipher<T extends BaseResponse = ShopCipherResponse>(
    data: CommonParams,
  ): Promise<T> {
    const { app_key, app_secret, access_token } = data;
    const requestOption: RequestOption = {
      uri: 'https://open-api.tiktokglobalshop.com/authorization/202309/shops',
      qs: {
        app_key: app_key,
      },
      headers: {
        'x-tts-access-token': access_token,
      },
      body: {},
    };

    try {
      const response = await sendRequest<T>(requestOption, app_secret);
      return response;
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * L√†m m·ªõi access token
   */
  async refreshToken<T extends BaseResponse = RefreshTokenResponse>(
    data: CommonParams,
  ): Promise<T> {
    const { app_key, app_secret, refresh_token } = data;
    const requestOption: RequestOption = {
      uri: 'https://auth.tiktok-shops.com/api/v2/token/refresh',
      qs: {
        refresh_token: refresh_token,
        app_secret: app_secret,
        app_key: app_key,
        grant_type: GRANT_TYPE.REFRESH_TOKEN,
      },
      body: {},
    };

    try {
      const response = await sendRequest<T>(requestOption, app_secret);
      return response;
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * L·∫•y danh s√°ch ƒë∆°n h√†ng t·ª´ TikTok Shop API
   */
  async getOrderList(data: CommonParams): Promise<OrdersResponse> {
    try {
      // X√°c th·ª±c c√°c tham s·ªë b·∫Øt bu·ªôc
      const requiredParams = [
        'app_key',
        'app_secret',
        'shop_cipher',
        'access_token',
      ];
      for (const param of requiredParams) {
        if (!data[param]) {
          throw new Error(`Thi·∫øu tham s·ªë b·∫Øt bu·ªôc: ${param}`);
        }
      }

      const { app_key, shop_cipher, access_token, page_size } = data;
      // Thi·∫øt l·∫≠p c√°c t√πy ch·ªçn request v·ªõi page_size t·ªëi ƒëa ƒë·ªÉ gi·∫£m s·ªë l·∫ßn g·ªçi API
      const requestOption: RequestOption = {
        uri: 'https://open-api.tiktokglobalshop.com/order/202309/orders/search',
        qs: {
          app_key: app_key,
          shop_cipher: shop_cipher,
          page_size: page_size || 100, // S·ª≠ d·ª•ng page_size t·ªëi ƒëa
        },
        headers: {
          'x-tts-access-token': access_token,
        },
        body: {},
      };

      // Th√™m c√°c tham s·ªë query t√πy ch·ªçn
      if (data.query_params?.sort_order) {
        requestOption.qs.sort_order = data.query_params?.sort_order;
      }

      if (data.query_params?.sort_field) {
        requestOption.qs.sort_field = data.query_params?.sort_field;
      }

      if (data.query_params?.page_token) {
        requestOption.qs.page_token = data.query_params?.page_token;
      }

      // Th√™m c√°c tham s·ªë body ƒë·ªÉ l·ªçc - s·ª≠ d·ª•ng create_time_lt thay v√¨ create_time_le ƒë·ªÉ t·ªëi ∆∞u h∆°n
      const bodyParams = [
        'order_status',
        'create_time_ge',
        'create_time_lt', // Thay ƒë·ªïi t·ª´ create_time_le th√†nh create_time_lt
        'update_time_ge',
        'update_time_lt', // Thay ƒë·ªïi t·ª´ update_time_le th√†nh update_time_lt
        'shipping_type',
        'buyer_user_id',
        'is_buyer_request_cancel',
        'warehouse_ids',
      ];

      bodyParams.forEach((param) => {
        if (
          data.query_params &&
          data.query_params[param] !== undefined &&
          isValidBodyValue(data.query_params[param])
        ) {
          requestOption.body[param] = data.query_params[param];
        }
      });

      const response = await sendRequest<OrdersResponse>(
        requestOption,
        data.app_secret,
        'POST',
      );

      // L∆∞u response v√†o file txt
      // try {
      //   // T·∫°o th∆∞ m·ª•c logs n·∫øu ch∆∞a t·ªìn t·∫°i
      //   const logsDir = path.join(process.cwd(), 'logs');
      //   if (!fs.existsSync(logsDir)) {
      //     fs.mkdirSync(logsDir, { recursive: true });
      //   }

      //   // T·∫°o t√™n file v·ªõi timestamp
      //   const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      //   const filename = path.join(logsDir, `tiktok_orders_${timestamp}.txt`);

      //   // L∆∞u th√¥ng tin body request v√† response
      //   const logData = {
      //     timestamp: new Date().toISOString(),
      //     requestParams: {
      //       uri: requestOption.uri,
      //       queryParams: requestOption.qs,
      //       bodyParams: requestOption.body,
      //     },
      //     response: response,
      //   };

      //   fs.writeFileSync(filename, JSON.stringify(logData, null, 2));
      //   console.log(`‚úÖ ƒê√£ l∆∞u response v√†o file: ${filename}`);
      // } catch (fileError) {
      //   console.error('‚ùå L·ªói khi l∆∞u response v√†o file:', fileError);
      // }

      return response;
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * H√†m helper ƒë∆∞·ª£c t·ªëi ∆∞u ƒë·ªÉ l·∫•y ƒë∆°n h√†ng v·ªõi ph√¢n trang nhanh h∆°n
   * @param options T√πy ch·ªçn API
   * @param startTimestamp Th·ªùi gian b·∫Øt ƒë·∫ßu (Unix timestamp)
   * @param endTimestamp Th·ªùi gian k·∫øt th√∫c (Unix timestamp)
   * @param page_size K√≠ch th∆∞·ªõc trang
   * @param sortOrder Th·ª© t·ª± s·∫Øp x·∫øp (DESC cho ƒë∆°n h√†ng m·ªõi nh·∫•t, ASC cho ƒë∆°n h√†ng c≈© nh·∫•t)
   * @returns Danh s√°ch ƒë∆°n h√†ng ƒë√£ x·ª≠ l√Ω
   */
  private async fetchOrdersWithPagination(
    options: CommonParams,
    startTimestamp: number,
    endTimestamp: number,
    page_size = 100,
    sortOrder: 'ASC' | 'DESC' = 'DESC', // M·∫∑c ƒë·ªãnh DESC ƒë·ªÉ l·∫•y ƒë∆°n m·ªõi nh·∫•t tr∆∞·ªõc
  ): Promise<ExtractedOrderItem[]> {
    // M·∫£ng l∆∞u tr·ªØ t·∫•t c·∫£ c√°c ƒë∆°n h√†ng
    let allOrders: Order[] = [];
    let hasMoreData = true;
    let nextPageToken = '';
    let totalCount = 0;
    let requestCount = 0;
    const maxRequests = 50; // Gi·ªõi h·∫°n s·ªë request ƒë·ªÉ tr√°nh timeout

    console.log(
      `üöÄ B·∫Øt ƒë·∫ßu l·∫•y ƒë∆°n h√†ng (${sortOrder}) t·ª´ ${new Date(startTimestamp * 1000).toLocaleString()} ƒë·∫øn ${new Date(endTimestamp * 1000).toLocaleString()}`,
    );

    // L·∫•y t·∫•t c·∫£ c√°c trang d·ªØ li·ªáu
    while (hasMoreData && requestCount < maxRequests) {
      requestCount++;

      // C·∫≠p nh·∫≠t t√πy ch·ªçn v·ªõi page_token n·∫øu c√≥
      const requestOptions: CommonParams = {
        ...options,
        query_params: {
          page_size,
          create_time_ge: startTimestamp,
          create_time_lt: endTimestamp, // S·ª≠ d·ª•ng create_time_lt thay v√¨ create_time_le
          sort_field: 'create_time',
          sort_order: sortOrder,
        },
      };

      // Th√™m page_token n·∫øu kh√¥ng ph·∫£i l·∫ßn g·ªçi ƒë·∫ßu ti√™n
      if (nextPageToken) {
        requestOptions.query_params.page_token = nextPageToken;
      }

      try {
        const result = await this.getOrderList(requestOptions);

        // L∆∞u t·ªïng s·ªë l∆∞·ª£ng ƒë∆°n h√†ng n·∫øu l√† l·∫ßn ƒë·∫ßu
        if (totalCount === 0 && result.data?.total_count) {
          totalCount = result.data.total_count;
        }

        // Th√™m ƒë∆°n h√†ng v√†o m·∫£ng k·∫øt qu·∫£
        if (result.data?.orders && Array.isArray(result.data.orders)) {
          allOrders = [...allOrders, ...result.data.orders];
        }

        // Ki·ªÉm tra c√≥ trang ti·∫øp theo kh√¥ng
        if (result.data?.next_page_token) {
          nextPageToken = result.data.next_page_token;
          console.log(
            `üì¶ ƒê√£ l·∫•y ${allOrders.length}/${totalCount || '?'} ƒë∆°n h√†ng (Request #${requestCount})`,
          );
        } else {
          hasMoreData = false;
        }

        // T·ªëi ∆∞u: N·∫øu ƒë√£ l·∫•y ƒë·ªß ƒë∆°n h√†ng trong kho·∫£ng th·ªùi gian, c√≥ th·ªÉ d·ª´ng s·ªõm
        if (allOrders.length > 0) {
          const lastOrder = allOrders[allOrders.length - 1];
          if (sortOrder === 'DESC' && lastOrder.create_time < startTimestamp) {
            console.log(
              '‚ö° T·ªëi ∆∞u: D·ª´ng s·ªõm v√¨ ƒë√£ v∆∞·ª£t qua kho·∫£ng th·ªùi gian y√™u c·∫ßu',
            );
            break;
          }
          if (sortOrder === 'ASC' && lastOrder.create_time > endTimestamp) {
            console.log(
              '‚ö° T·ªëi ∆∞u: D·ª´ng s·ªõm v√¨ ƒë√£ v∆∞·ª£t qua kho·∫£ng th·ªùi gian y√™u c·∫ßu',
            );
            break;
          }
        }
      } catch (error) {
        console.error(`‚ùå L·ªói t·∫°i request #${requestCount}:`, error);
        break;
      }
    }

    if (requestCount >= maxRequests) {
      console.log(
        `‚ö†Ô∏è ƒê√£ ƒë·∫°t gi·ªõi h·∫°n ${maxRequests} requests, d·ª´ng l·∫°i ƒë·ªÉ tr√°nh timeout`,
      );
    }

    // L·ªçc ƒë∆°n h√†ng theo kho·∫£ng th·ªùi gian (ch·ªâ c·∫ßn thi·∫øt n·∫øu API tr·∫£ v·ªÅ ƒë∆°n h√†ng ngo√†i kho·∫£ng)
    const validOrders = allOrders.filter((order) => {
      return (
        order.create_time >= startTimestamp && order.create_time < endTimestamp
      );
    });

    if (validOrders.length < allOrders.length) {
      console.log(
        `üîç ƒê√£ l·ªçc b·ªè ${
          allOrders.length - validOrders.length
        } ƒë∆°n h√†ng n·∫±m ngo√†i kho·∫£ng th·ªùi gian y√™u c·∫ßu.`,
      );
    }

    console.log(
      `‚úÖ Ho√†n th√†nh: ${validOrders.length} ƒë∆°n h√†ng trong ${requestCount} requests`,
    );

    let region: string | undefined;
    if (options.region) {
      region = options.region;
    }

    const extractedData = extractOrderData(validOrders, region);

    // üéØ ƒê·∫£m b·∫£o s·∫Øp x·∫øp cu·ªëi c√πng t·ª´ c≈© ƒë·∫øn m·ªõi (ƒë∆°n c≈© ·ªü tr√™n, m·ªõi ch√®n xu·ªëng d∆∞·ªõi)
    extractedData.sort((a, b) => {
      if (!a.created_time) return -1;
      if (!b.created_time) return 1;

      // Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng DD/MM/YYYY HH:mm:ss th√†nh timestamp ƒë·ªÉ so s√°nh
      const parseDateTime = (dateTimeStr: string) => {
        // Format: DD/MM/YYYY HH:mm:ss
        const [datePart, timePart] = dateTimeStr.split(' ');
        if (!datePart) return 0;

        const [day, month, year] = datePart.split('/').map(Number);
        if (timePart) {
          const [hour, minute, second] = timePart.split(':').map(Number);
          return new Date(
            year,
            month - 1,
            day,
            hour || 0,
            minute || 0,
            second || 0,
          ).getTime();
        } else {
          return new Date(year, month - 1, day).getTime();
        }
      };

      const timeA = parseDateTime(a.created_time);
      const timeB = parseDateTime(b.created_time);
      return timeA - timeB; // S·∫Øp x·∫øp t·ª´ c≈© ƒë·∫øn m·ªõi
    });

    return extractedData;
  }

  /**
   * Ph∆∞∆°ng th·ª©c m·ªõi: L·∫•y ƒë∆°n h√†ng v·ªõi chi·∫øn l∆∞·ª£c song song ƒë·ªÉ tƒÉng t·ªëc
   */
  private async fetchOrdersParallel(
    options: CommonParams,
    startTimestamp: number,
    endTimestamp: number,
    page_size = 100,
  ): Promise<ExtractedOrderItem[]> {
    // Chia kho·∫£ng th·ªùi gian th√†nh c√°c chunk nh·ªè h∆°n ƒë·ªÉ x·ª≠ l√Ω song song
    const timeRange = endTimestamp - startTimestamp;
    const maxChunkSize = 1 * 24 * 60 * 60; // 1 ng√†y

    if (timeRange <= maxChunkSize) {
      // N·∫øu kho·∫£ng th·ªùi gian nh·ªè, s·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c th√¥ng th∆∞·ªùng
      return this.fetchOrdersWithPagination(
        options,
        startTimestamp,
        endTimestamp,
        page_size,
        'DESC',
      );
    }

    // Chia th√†nh c√°c chunk
    const chunks: Array<{ start: number; end: number }> = [];
    let currentStart = startTimestamp;

    while (currentStart < endTimestamp) {
      const currentEnd = Math.min(currentStart + maxChunkSize, endTimestamp);
      chunks.push({ start: currentStart, end: currentEnd });
      currentStart = currentEnd;
    }

    console.log(`üîÄ Chia th√†nh ${chunks.length} chunks ƒë·ªÉ x·ª≠ l√Ω song song`);

    // X·ª≠ l√Ω song song c√°c chunk (gi·∫£m xu·ªëng c√≤n 3 chunk c√πng l√∫c ƒë·ªÉ tr√°nh rate limit)
    const maxConcurrent = 10; // Gi·∫£m t·ª´ 5 xu·ªëng 3 ƒë·ªÉ tr√°nh qu√° t·∫£i
    const allResults: ExtractedOrderItem[] = [];
    const delayBetweenBatches = 2000; // Th√™m 2 gi√¢y delay gi·ªØa c√°c batch

    for (let i = 0; i < chunks.length; i += maxConcurrent) {
      const currentChunks = chunks.slice(i, i + maxConcurrent);
      console.log(
        `üîÑ ƒêang x·ª≠ l√Ω batch ${Math.floor(i / maxConcurrent) + 1}/${Math.ceil(chunks.length / maxConcurrent)}, ${currentChunks.length} chunks`,
      );

      try {
        // T·∫°o c√°c promise v·ªõi c√°c t√πy ch·ªçn kh√°c nhau cho m·ªói chunk
        const promises = currentChunks.map((chunk, index) => {
          // Th√™m delay kh√°c nhau cho m·ªói request trong batch ƒë·ªÉ tr√°nh g·ª≠i c√πng l√∫c
          return new Promise<ExtractedOrderItem[]>((resolve) => {
            // Th√™m delay ng·∫Øn gi·ªØa c√°c request trong c√πng batch
            setTimeout(() => {
              this.fetchOrdersWithPagination(
                options,
                chunk.start,
                chunk.end,
                page_size,
                'DESC',
              )
                .then((result) => {
                  resolve(result);
                })
                .catch((error) => {
                  console.error(`‚ùå L·ªói khi x·ª≠ l√Ω chunk ${i + index}:`, error);
                  resolve([]); // Tr·∫£ v·ªÅ m·∫£ng r·ªóng n·∫øu c√≥ l·ªói ƒë·ªÉ kh√¥ng ph√° v·ª° Promise.all
                });
            }, index * 500);
          });
        });

        const results = await Promise.all(promises);
        results.forEach((result) => allResults.push(...result));

        // Th√™m delay gi·ªØa c√°c batch ƒë·ªÉ tr√°nh rate limit
        if (i + maxConcurrent < chunks.length) {
          console.log(
            `‚è±Ô∏è Ch·ªù ${delayBetweenBatches}ms tr∆∞·ªõc khi x·ª≠ l√Ω batch ti·∫øp theo...`,
          );
          await new Promise((resolve) =>
            setTimeout(resolve, delayBetweenBatches),
          );
        }
      } catch (error) {
        console.error('‚ùå L·ªói khi x·ª≠ l√Ω song song:', error);
        // Fallback: x·ª≠ l√Ω tu·∫ßn t·ª± v·ªõi delay gi·ªØa c√°c request
        for (const [index, chunk] of currentChunks.entries()) {
          try {
            // Th√™m delay gi·ªØa c√°c request tu·∫ßn t·ª±
            if (index > 0) {
              await new Promise((resolve) => setTimeout(resolve, 1000));
            }

            const result = await this.fetchOrdersWithPagination(
              options,
              chunk.start,
              chunk.end,
              page_size,
              'DESC',
            );
            allResults.push(...result);
          } catch (chunkError) {
            console.error('‚ùå L·ªói khi x·ª≠ l√Ω chunk:', chunkError);
          }
        }
      }
    }

    console.log(
      `üìä T·ªïng c·ªông ƒë√£ l·∫•y ${allResults.length} ƒë∆°n h√†ng t·ª´ ${chunks.length} chunks`,
    );

    // üéØ B∆Ø·ªöC QUAN TR·ªåNG: S·∫Øp x·∫øp l·∫°i to√†n b·ªô k·∫øt qu·∫£ theo th·ªùi gian t·∫°o t·ª´ c≈© ƒë·∫øn m·ªõi
    allResults.sort((a, b) => {
      if (!a.created_time) return -1;
      if (!b.created_time) return 1;

      // Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng DD/MM/YYYY HH:mm:ss th√†nh timestamp ƒë·ªÉ so s√°nh
      const parseDateTime = (dateTimeStr: string) => {
        // Format: DD/MM/YYYY HH:mm:ss
        const [datePart, timePart] = dateTimeStr.split(' ');
        if (!datePart) return 0;

        const [day, month, year] = datePart.split('/').map(Number);
        if (timePart) {
          const [hour, minute, second] = timePart.split(':').map(Number);
          return new Date(
            year,
            month - 1,
            day,
            hour || 0,
            minute || 0,
            second || 0,
          ).getTime();
        } else {
          return new Date(year, month - 1, day).getTime();
        }
      };

      const timeA = parseDateTime(a.created_time);
      const timeB = parseDateTime(b.created_time);
      return timeA - timeB; // S·∫Øp x·∫øp t·ª´ c≈© ƒë·∫øn m·ªõi (ƒë∆°n c≈© ·ªü tr√™n, m·ªõi ch√®n xu·ªëng d∆∞·ªõi)
    });

    console.log(
      `‚úÖ ƒê√£ s·∫Øp x·∫øp l·∫°i ${allResults.length} ƒë∆°n h√†ng theo th·ª© t·ª± t·ª´ c≈© ƒë·∫øn m·ªõi`,
    );

    return allResults;
  }

  /**
   * L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng t·ª´ ƒë·∫ßu nƒÉm ƒë·∫øn hi·ªán t·∫°i
   */
  async getAllOrders(options: CommonParams): Promise<AllOrdersResponse> {
    // L·∫•y region t·ª´ options
    const region = options.region;

    // T√≠nh timestamp cho ng√†y 1 th√°ng 1 nƒÉm hi·ªán t·∫°i theo timezone c·ªßa region
    const currentDate = getCurrentDateByRegion(region);
    const currentYear = currentDate.getFullYear();
    const startDate = new Date(currentYear, 0, 1);
    const startTimestamp = toUnixTimestampByRegion(startDate, region);

    // T√≠nh timestamp cho 15 ng√†y tr∆∞·ªõc theo timezone c·ªßa region
    const fifteenDaysAgo = getDateDaysAgoByRegion(15, region);
    const fifteenDaysAgoTimestamp = toUnixTimestampByRegion(
      fifteenDaysAgo,
      region,
    );

    // L∆∞u tr·ªØ t·∫•t c·∫£ ƒë∆°n h√†ng
    const allOrders: ExtractedOrderItem[] = [];

    // L·∫•y ƒë∆°n h√†ng g·∫ßn ƒë√¢y (15 ng√†y g·∫ßn nh·∫•t) - nh·ªØng ƒë∆°n n√†y s·∫Ω ghi ƒë√® l√™n d·ªØ li·ªáu hi·ªán c√≥
    let pageToken = '';
    let hasMoreRecentOrders = true;

    console.log(
      `ƒêang l·∫•y ƒë∆°n h√†ng g·∫ßn ƒë√¢y (15 ng√†y g·∫ßn nh·∫•t) cho region ${region || 'VN'}...`,
    );

    while (hasMoreRecentOrders) {
      const recentOrdersOptions: CommonParams = {
        ...options,
        query_params: {
          create_time_ge: fifteenDaysAgoTimestamp,
          page_size: 100,
          sort_field: 'create_time',
          sort_order: 'DESC',
        },
      };

      if (pageToken) {
        recentOrdersOptions.query_params.page_token = pageToken;
      }

      const response = await this.getOrderList(recentOrdersOptions);

      if (response.code === 0 && response.data && response.data.orders) {
        const extractedOrders = extractOrderData(response.data.orders, region);
        allOrders.push(...extractedOrders);

        if (response.data.next_page_token) {
          pageToken = response.data.next_page_token;
        } else {
          hasMoreRecentOrders = false;
        }
      } else {
        console.error(
          'L·ªói khi l·∫•y ƒë∆°n h√†ng g·∫ßn ƒë√¢y:',
          response.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh',
        );
        hasMoreRecentOrders = false;
      }
    }

    // L·∫•y ƒë∆°n h√†ng c≈© h∆°n (t·ª´ ƒë·∫ßu nƒÉm ƒë·∫øn 15 ng√†y tr∆∞·ªõc) - nh·ªØng ƒë∆°n n√†y s·∫Ω kh√¥ng ghi ƒë√® l√™n d·ªØ li·ªáu hi·ªán c√≥
    pageToken = '';
    let hasMoreOlderOrders = true;

    console.log('ƒêang l·∫•y ƒë∆°n h√†ng c≈© h∆°n (t·ª´ ƒë·∫ßu nƒÉm ƒë·∫øn 15 ng√†y tr∆∞·ªõc)...');

    while (hasMoreOlderOrders) {
      const olderOrdersOptions: CommonParams = {
        ...options,
        page_size: 100,
        query_params: {
          sort_order: 'DESC',
          sort_field: 'create_time',
          create_time_ge: startTimestamp,
          create_time_lt: fifteenDaysAgoTimestamp,
        } as QueryParams,
      };

      if (pageToken) {
        olderOrdersOptions.query_params.page_token = pageToken;
      }

      const response = await this.getOrderList(olderOrdersOptions);

      if (response.code === 0 && response.data && response.data.orders) {
        const extractedOrders = extractOrderData(response.data.orders, region);
        allOrders.push(...extractedOrders);

        if (response.data.next_page_token) {
          pageToken = response.data.next_page_token;
        } else {
          hasMoreOlderOrders = false;
        }
      } else {
        console.error(
          'L·ªói khi l·∫•y ƒë∆°n h√†ng c≈© h∆°n:',
          response.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh',
        );
        hasMoreOlderOrders = false;
      }
    }

    // Ph√¢n lo·∫°i ƒë∆°n h√†ng theo th√°ng
    const ordersByMonth: Record<number, ExtractedOrderItem[]> = {};

    // Kh·ªüi t·∫°o m·∫£ng cho m·ªói th√°ng t·ª´ 1-12
    for (let i = 1; i <= 12; i++) {
      ordersByMonth[i] = [];
    }

    // Ph√¢n lo·∫°i ƒë∆°n h√†ng theo th√°ng
    allOrders.forEach((order) => {
      if (!order.created_time) {
        return;
      }

      // Chuy·ªÉn ƒë·ªïi chu·ªói ng√†y th√°ng (DD/MM/YYYY HH:mm:ss)
      const parts = order.created_time.split(/[/ :]/);
      if (parts.length < 3) {
        return;
      }

      // Format l√† DD/MM/YYYY, n√™n month ·ªü v·ªã tr√≠ th·ª© 2 (index 1)
      const month = Number(parts[1]);
      const year = Number(parts[2]);

      // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa d·ªØ li·ªáu
      if (isNaN(month) || isNaN(year) || month < 1 || month > 12) {
        return;
      }

      // Ch·ªâ th√™m ƒë∆°n h√†ng c·ªßa nƒÉm hi·ªán t·∫°i
      if (year === currentYear && Array.isArray(ordersByMonth[month])) {
        ordersByMonth[month].push(order);
      }
    });

    return {
      allOrders,
      ordersByMonth,
      recentOrdersTimestamp: fifteenDaysAgoTimestamp,
    };
  }

  /**
   * L·∫•y ƒë∆°n h√†ng trong kho·∫£ng ng√†y g·∫ßn ƒë√¢y - ƒê∆Ø·ª¢C T·ªêI ∆ØU
   */
  async fetchOrdersByDateRange(
    options: CommonParams,
    daysAgo = 30,
    page_size = 100,
  ) {
    try {
      // L·∫•y region t·ª´ options
      const region = options.region;

      // T√≠nh to√°n th·ªùi gian b·∫Øt ƒë·∫ßu d·ª±a tr√™n s·ªë ng√†y theo timezone c·ªßa region
      const startDate = getDateDaysAgoByRegion(daysAgo, region);
      const endDate = getCurrentDateByRegion(region);

      const startTimestamp = toUnixTimestampByRegion(startDate, region);
      const endTimestamp = toUnixTimestampByRegion(endDate, region);

      console.log(
        `üöÄ T·ªëi ∆∞u: L·∫•y ƒë∆°n h√†ng trong ${daysAgo} ng√†y g·∫ßn nh·∫•t cho region ${region || 'VN'}...`,
      );
      console.log(`Timezone: ${getTimezoneByRegion(region)}`);
      console.log(`Timestamp: ${startTimestamp} ‚Üí ${endTimestamp}`);

      // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c song song n·∫øu kho·∫£ng th·ªùi gian l·ªõn
      if (daysAgo > 7) {
        return await this.fetchOrdersParallel(
          options,
          startTimestamp,
          endTimestamp,
          page_size,
        );
      } else {
        return await this.fetchOrdersWithPagination(
          options,
          startTimestamp,
          endTimestamp,
          page_size,
          'DESC', // L·∫•y ƒë∆°n h√†ng m·ªõi nh·∫•t tr∆∞·ªõc
        );
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y ƒë∆°n h√†ng:', error);
      return [];
    }
  }

  /**
   * L·∫•y ƒë∆°n h√†ng t·ª´ ƒë·∫ßu th√°ng ƒë·∫øn ng√†y 15 c·ªßa th√°ng hi·ªán t·∫°i - ƒê∆Ø·ª¢C T·ªêI ∆ØU
   */
  async fetchCurrentMonthOrders(options: CommonParams, page_size = 100) {
    try {
      // L·∫•y region t·ª´ options
      const region = options.region;

      // L·∫•y ng√†y hi·ªán t·∫°i theo timezone c·ªßa region
      const currentDate = getCurrentDateByRegion(region);
      const currentYear = currentDate.getFullYear();
      const currentMonth = currentDate.getMonth(); // 0-11

      // T√≠nh timestamp cho ng√†y ƒë·∫ßu ti√™n c·ªßa th√°ng hi·ªán t·∫°i
      const firstDayOfMonth = startOfMonth(new Date(currentYear, currentMonth));
      const firstDayTimestamp = toUnixTimestampByRegion(
        firstDayOfMonth,
        region,
      );

      // T√≠nh timestamp cho ng√†y 15 c·ªßa th√°ng hi·ªán t·∫°i
      const day15OfMonth = endOfDay(
        setDate(new Date(currentYear, currentMonth), 15),
      );
      const day15Timestamp = toUnixTimestampByRegion(day15OfMonth, region);

      // N·∫øu ng√†y hi·ªán t·∫°i l·ªõn h∆°n ng√†y 15, s·ª≠ d·ª•ng timestamp ng√†y 15
      // N·∫øu ng√†y hi·ªán t·∫°i nh·ªè h∆°n ho·∫∑c b·∫±ng ng√†y 15, s·ª≠ d·ª•ng timestamp hi·ªán t·∫°i
      const endTimestamp =
        currentDate.getDate() > 15
          ? day15Timestamp
          : toUnixTimestampByRegion(currentDate, region);

      console.log(
        `üöÄ T·ªëi ∆∞u: L·∫•y ƒë∆°n h√†ng t·ª´ ƒë·∫ßu th√°ng ${
          currentMonth + 1
        }/${currentYear} ƒë·∫øn ng√†y 15/${currentMonth + 1}/${currentYear} cho region ${region || 'VN'}...`,
      );
      console.log(`Timezone: ${getTimezoneByRegion(region)}`);
      console.log(`Timestamp: ${firstDayTimestamp} ‚Üí ${endTimestamp}`);

      return await this.fetchOrdersWithPagination(
        options,
        firstDayTimestamp,
        endTimestamp,
        page_size,
        'DESC', // L·∫•y ƒë∆°n h√†ng m·ªõi nh·∫•t tr∆∞·ªõc
      );
    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y ƒë∆°n h√†ng ƒë·∫ßu th√°ng:', error);
      return [];
    }
  }

  /**
   * L·∫•y ƒë∆°n h√†ng t·ª´ ƒë·∫ßu th√°ng tr∆∞·ªõc ƒë·∫øn ng√†y 15 c·ªßa th√°ng hi·ªán t·∫°i - ƒê∆Ø·ª¢C T·ªêI ∆ØU
   */
  async fetchPreviousToCurrentMonthOrders(
    options: CommonParams,
    page_size = 100,
  ) {
    try {
      // L·∫•y region t·ª´ options
      const region = options.region;

      // L·∫•y th·ªùi gian hi·ªán t·∫°i theo timezone c·ªßa region
      const now = getCurrentDateByRegion(region);
      const currentYear = now.getFullYear();
      const currentMonth = now.getMonth(); // 0-11

      // T√≠nh nƒÉm v√† th√°ng tr∆∞·ªõc
      const previousMonth = currentMonth === 0 ? 11 : currentMonth - 1;
      const previousMonthYear =
        currentMonth === 0 ? currentYear - 1 : currentYear;

      // Ng√†y 1 th√°ng tr∆∞·ªõc theo timezone c·ªßa region
      const firstDayLocal = startOfMonth(
        new Date(previousMonthYear, previousMonth),
      );
      const firstDayTimestamp = toUnixTimestampByRegion(firstDayLocal, region);

      // Ng√†y 15 th√°ng n√†y 23:59:59 theo timezone c·ªßa region
      const day15Local = endOfDay(
        setDate(new Date(currentYear, currentMonth), 15),
      );
      const day15Timestamp = toUnixTimestampByRegion(day15Local, region);

      // Log ki·ªÉm tra
      console.log(
        `üöÄ T·ªëi ∆∞u: L·∫•y ƒë∆°n h√†ng t·ª´ ${format(firstDayLocal, 'dd/MM/yyyy')} ƒë·∫øn ${format(
          day15Local,
          'dd/MM/yyyy',
        )} cho region ${region || 'VN'}`,
      );
      console.log(`Timezone: ${getTimezoneByRegion(region)}`);
      console.log(`Timestamp: ${firstDayTimestamp} ‚Üí ${day15Timestamp}`);

      // S·ª≠ d·ª•ng x·ª≠ l√Ω song song cho kho·∫£ng th·ªùi gian l·ªõn
      const timeRange = day15Timestamp - firstDayTimestamp;
      const sevenDays = 7 * 24 * 60 * 60;

      if (timeRange > sevenDays) {
        return await this.fetchOrdersParallel(
          options,
          firstDayTimestamp,
          day15Timestamp,
          page_size,
        );
      } else {
        return await this.fetchOrdersWithPagination(
          options,
          firstDayTimestamp,
          day15Timestamp,
          page_size,
          'DESC',
        );
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y ƒë∆°n h√†ng:', error);
      return [];
    }
  }

  /**
   * L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng c·ªßa th√°ng hi·ªán t·∫°i - ƒê∆Ø·ª¢C T·ªêI ∆ØU
   */
  async fetchCurrentMonthAllOrders(options: CommonParams, page_size = 100) {
    try {
      // L·∫•y region t·ª´ options
      const region = options.region;

      // L·∫•y th·ªùi gian hi·ªán t·∫°i theo timezone c·ªßa region
      const now = getCurrentDateByRegion(region);
      const currentYear = now.getFullYear();
      const currentMonth = now.getMonth(); // 0-11

      // Ng√†y 1 c·ªßa th√°ng hi·ªán t·∫°i
      const firstDayLocal = startOfMonth(new Date(currentYear, currentMonth));
      const firstDayTimestamp = toUnixTimestampByRegion(firstDayLocal, region);

      // Th·ªùi ƒëi·ªÉm hi·ªán t·∫°i theo timezone c·ªßa region
      const nowTimestamp = toUnixTimestampByRegion(now, region);

      // Log ki·ªÉm tra
      console.log(
        `üöÄ T·ªëi ∆∞u: L·∫•y ƒë∆°n h√†ng c·ªßa th√°ng ${
          currentMonth + 1
        }/${currentYear} (t·ª´ ng√†y 1 ƒë·∫øn hi·ªán t·∫°i) cho region ${region || 'VN'}`,
      );
      console.log(`Timezone: ${getTimezoneByRegion(region)}`);
      console.log(`Timestamp: ${firstDayTimestamp} ‚Üí ${nowTimestamp}`);

      return await this.fetchOrdersWithPagination(
        options,
        firstDayTimestamp,
        nowTimestamp,
        page_size,
        'DESC', // L·∫•y ƒë∆°n h√†ng m·ªõi nh·∫•t tr∆∞·ªõc
      );
    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y ƒë∆°n h√†ng:', error);
      return [];
    }
  }

  /**
   * L·∫•y ƒë∆°n h√†ng trong kho·∫£ng th·ªùi gian t√πy ch·ªânh - ƒê∆Ø·ª¢C T·ªêI ∆ØU
   */
  async getOrdersByDateRange(
    options: CommonParams,
    startDate: Date,
    endDate: Date,
    page_size = 100,
    maxRetries = 3,
  ) {
    const region = options.region;
    let retryCount = 0;
    let lastError: unknown = null;

    while (retryCount <= maxRetries) {
      try {
        // T√≠nh timestamp cho th·ªùi gian b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c theo timezone c·ªßa region
        const startTimestamp = toUnixTimestampByRegion(startDate, region);
        const endTimestamp = toUnixTimestampByRegion(endDate, region);

        console.log(
          `üöÄ ${retryCount > 0 ? `[Th·ª≠ l·∫°i l·∫ßn ${retryCount}/${maxRetries}] ` : ''}L·∫•y ƒë∆°n h√†ng t·ª´ ${startDate.toLocaleString(
            'vi-VN',
          )} ƒë·∫øn ${endDate.toLocaleString('vi-VN')} cho region ${region || 'VN'}...`,
        );
        console.log(`Timezone: ${getTimezoneByRegion(region)}`);
        console.log(`Timestamp: ${startTimestamp} ƒë·∫øn ${endTimestamp}`);

        // T·ª± ƒë·ªông ch·ªçn ph∆∞∆°ng th·ª©c t·ªëi ∆∞u d·ª±a tr√™n kho·∫£ng th·ªùi gian
        const timeRange = endTimestamp - startTimestamp;
        const sevenDays = 7 * 24 * 60 * 60;

        let orders: ExtractedOrderItem[] = [];
        if (timeRange > sevenDays) {
          console.log(
            `üìä Kho·∫£ng th·ªùi gian > 7 ng√†y (${Math.floor(timeRange / 86400)} ng√†y), s·ª≠ d·ª•ng x·ª≠ l√Ω song song`,
          );
          orders = await this.fetchOrdersParallel(
            options,
            startTimestamp,
            endTimestamp,
            page_size,
          );
        } else {
          console.log(
            `üìä Kho·∫£ng th·ªùi gian <= 7 ng√†y (${Math.floor(timeRange / 86400)} ng√†y), s·ª≠ d·ª•ng x·ª≠ l√Ω tu·∫ßn t·ª±`,
          );
          orders = await this.fetchOrdersWithPagination(
            options,
            startTimestamp,
            endTimestamp,
            page_size,
            'DESC',
          );
        }

        console.log(
          `‚úÖ ƒê√£ l·∫•y th√†nh c√¥ng ${orders.length} ƒë∆°n h√†ng trong kho·∫£ng th·ªùi gian`,
        );
        return orders;
      } catch (error: unknown) {
        lastError = error;
        retryCount++;

        // Ki·ªÉm tra n·∫øu l√† l·ªói Gateway Timeout (504)
        const errorStr = String(error);
        const isTimeoutError =
          errorStr.includes('504') || errorStr.includes('Gateway Time-out');

        if (retryCount <= maxRetries) {
          const delayMs = isTimeoutError
            ? 5000 * retryCount
            : 2000 * retryCount;
          console.error(
            `‚ùå L·ªói khi l·∫•y ƒë∆°n h√†ng (${isTimeoutError ? 'Gateway Timeout' : 'L·ªói kh√°c'}): ${errorStr}`,
          );
          console.log(
            `‚è±Ô∏è ƒêang th·ª≠ l·∫°i l·∫ßn ${retryCount}/${maxRetries} sau ${delayMs}ms...`,
          );

          // Ch·ªù tr∆∞·ªõc khi th·ª≠ l·∫°i
          await new Promise((resolve) => setTimeout(resolve, delayMs));
        } else {
          console.error(
            `‚ùå ƒê√£ th·ª≠ l·∫°i ${maxRetries} l·∫ßn nh∆∞ng v·∫´n th·∫•t b·∫°i:`,
            errorStr,
          );
        }
      }
    }

    console.error(
      `‚ùå Kh√¥ng th·ªÉ l·∫•y ƒë∆°n h√†ng sau ${maxRetries} l·∫ßn th·ª≠:`,
      String(lastError),
    );
    return [];
  }

  /**
   * Ph∆∞∆°ng th·ª©c m·ªõi: L·∫•y ƒë∆°n h√†ng ƒë∆∞·ª£c c·∫≠p nh·∫≠t g·∫ßn ƒë√¢y (s·ª≠ d·ª•ng update_time thay v√¨ create_time)
   */
  async fetchRecentlyUpdatedOrders(
    options: CommonParams,
    daysAgo = 7,
    page_size = 100,
  ) {
    try {
      const region = options.region;

      const startDate = getDateDaysAgoByRegion(daysAgo, region);
      const endDate = getCurrentDateByRegion(region);

      const startTimestamp = toUnixTimestampByRegion(startDate, region);
      const endTimestamp = toUnixTimestampByRegion(endDate, region);

      console.log(
        `üîÑ L·∫•y ƒë∆°n h√†ng ƒë∆∞·ª£c c·∫≠p nh·∫≠t trong ${daysAgo} ng√†y g·∫ßn nh·∫•t cho region ${region || 'VN'}...`,
      );

      const requestOptions: CommonParams = {
        ...options,
        query_params: {
          page_size,
          update_time_ge: startTimestamp,
          update_time_lt: endTimestamp,
          sort_field: 'update_time', // S·∫Øp x·∫øp theo th·ªùi gian c·∫≠p nh·∫≠t
          sort_order: 'DESC',
        },
      };

      let allOrders: Order[] = [];
      let hasMoreData = true;
      let nextPageToken = '';

      while (hasMoreData) {
        if (nextPageToken) {
          requestOptions.query_params.page_token = nextPageToken;
        }

        const result = await this.getOrderList(requestOptions);

        if (result.data?.orders && Array.isArray(result.data.orders)) {
          allOrders = [...allOrders, ...result.data.orders];
        }

        if (result.data?.next_page_token) {
          nextPageToken = result.data.next_page_token;
          console.log(
            `üì¶ ƒê√£ l·∫•y ${allOrders.length} ƒë∆°n h√†ng ƒë∆∞·ª£c c·∫≠p nh·∫≠t...`,
          );
        } else {
          hasMoreData = false;
        }
      }

      console.log(`‚úÖ Ho√†n th√†nh: ${allOrders.length} ƒë∆°n h√†ng ƒë∆∞·ª£c c·∫≠p nh·∫≠t`);
      return extractOrderData(allOrders, region);
    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y ƒë∆°n h√†ng ƒë∆∞·ª£c c·∫≠p nh·∫≠t:', error);
      return [];
    }
  }
}
